/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param subject
  *   The subject (= unique identifier) of the end-user who has granted authorization to the client
  *   application.
  * @param scopes
  *   An array of new scopes. Optional. If a non-null value is given, the new scopes are set to all
  *   existing access tokens. If an API call is made using
  *   `\"Content-Type: application/x-www-form-urlencoded\"`, scope names listed in this request
  *   parameter should be delimited by spaces (after form encoding, spaces are converted to `+`).
  */
case class ClientAuthorizationUpdateRequest(
    subject: String,
    scopes: Option[Seq[String]] = None
)

object ClientAuthorizationUpdateRequest {

  given jsonCodec: JsonValueCodec[ClientAuthorizationUpdateRequest] =
    JsonCodecMaker.make(codecMakerConfig)

  given encoderClientAuthorizationUpdateRequest: Encoder[ClientAuthorizationUpdateRequest] = Encoder
    .instance { t =>
      Json.fromFields {
        Seq(
          Some("subject" -> t.subject.asJson),
          t.scopes.map(v => "scopes" -> v.asJson)
        ).flatten
      }
    }

  given decoderClientAuthorizationUpdateRequest: Decoder[ClientAuthorizationUpdateRequest] = Decoder
    .instance { c =>
      for {
        subject <- c.downField("subject").as[String]
        scopes  <- c.downField("scopes").as[Option[Seq[String]]]
      } yield ClientAuthorizationUpdateRequest(
        subject = subject,
        scopes = scopes
      )
    }

}
