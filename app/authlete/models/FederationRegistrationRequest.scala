/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param entityConfiguration
  *   The entity configuration of a relying party.
  * @param trustChain
  *   The trust chain of a relying party.
  */
case class FederationRegistrationRequest(
    entityConfiguration: Option[String] = None,
    trustChain: Option[String] = None
)

object FederationRegistrationRequest {

  given jsonCodec: JsonValueCodec[FederationRegistrationRequest] =
    JsonCodecMaker.make(codecMakerConfig)

  given encoderFederationRegistrationRequest: Encoder[FederationRegistrationRequest] = Encoder
    .instance { t =>
      Json.fromFields {
        Seq(
          t.entityConfiguration.map(v => "entityConfiguration" -> v.asJson),
          t.trustChain.map(v => "trustChain" -> v.asJson)
        ).flatten
      }
    }

  given decoderFederationRegistrationRequest: Decoder[FederationRegistrationRequest] = Decoder
    .instance { c =>
      for {
        entityConfiguration <- c.downField("entityConfiguration").as[Option[String]]
        trustChain          <- c.downField("trustChain").as[Option[String]]
      } yield FederationRegistrationRequest(
        entityConfiguration = entityConfiguration,
        trustChain = trustChain
      )
    }

}
