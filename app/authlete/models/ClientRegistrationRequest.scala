/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param json
  *   Client metadata in JSON format that complies with [RFC
  *   7591](https://datatracker.ietf.org/doc/html/rfc7591) (OAuth 2.0 Dynamic Client Registration
  *   Protocol).
  * @param token
  *   The client registration access token. Used only for GET, UPDATE, and DELETE requests.
  * @param clientId
  *   The client's identifier. Used for GET, UPDATE, and DELETE requests
  */
case class ClientRegistrationRequest(
    json: String,
    token: Option[String] = None,
    clientId: Option[String] = None
)

object ClientRegistrationRequest {

  given jsonCodec: JsonValueCodec[ClientRegistrationRequest] = JsonCodecMaker.make(codecMakerConfig)

  given encoderClientRegistrationRequest: Encoder[ClientRegistrationRequest] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        Some("json" -> t.json.asJson),
        t.token.map(v => "token" -> v.asJson),
        t.clientId.map(v => "clientId" -> v.asJson)
      ).flatten
    }
  }

  given decoderClientRegistrationRequest: Decoder[ClientRegistrationRequest] = Decoder.instance { c =>
    for {
      json     <- c.downField("json").as[String]
      token    <- c.downField("token").as[Option[String]]
      clientId <- c.downField("clientId").as[Option[String]]
    } yield ClientRegistrationRequest(
      json = json,
      token = token,
      clientId = clientId
    )
  }

}
