/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param requestableScopes
  *   The set of scopes that the client application is allowed to request. This paramter will be one
  *   of the following. - `null` - an empty set - a set with at least one element When the value of
  *   this parameter is `null`, it means that the set of scopes that the client application is
  *   allowed to request is the set of the scopes that the service supports. When the value of this
  *   parameter is an empty set, it means that the client application is not allowed to request any
  *   scopes. When the value of this parameter is a set with at least one element, it means that the
  *   set is the set of scopes that the client application is allowed to request.
  * @param requestableScopesEnabled
  *   The flag to indicate whether \"Requestable Scopes per Client\" is enabled or not. If `true`,
  *   you can define the set of scopes which this client application can request. If `false`, this
  *   client application can request any scope which is supported by the authorization server.
  * @param accessTokenDuration
  *   The value of the duration of access tokens per client in seconds. In normal cases, the value
  *   of the service's `accessTokenDuration` property is used as the duration of access tokens
  *   issued by the service. However, if this `accessTokenDuration` property holds a non-zero
  *   positive number and its value is less than the duration configured by the service, the value
  *   is used as the duration of access tokens issued to the client application. Note that the
  *   duration of access tokens can be controlled by the scope attribute `access_token.duration`,
  *   too. Authlete chooses the minimum value among the candidates.
  * @param refreshTokenDuration
  *   The value of the duration of refresh tokens per client in seconds. In normal cases, the value
  *   of the service's `refreshTokenDuration` property is used as the duration of refresh tokens
  *   issued by the service. However, if this `refreshTokenDuration` property holds a non-zero
  *   positive number and its value is less than the duration configured by the service, the value
  *   is used as the duration of refresh tokens issued to the client application. Note that the
  *   duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,
  *   too. Authlete chooses the minimum value among the candidates.
  * @param tokenExchangePermitted
  *   Get the flag indicating whether the client is explicitly given a permission to make token
  *   exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])
  */
case class ClientExtension(
    requestableScopes: Option[Seq[String]] = None,
    requestableScopesEnabled: Option[Boolean] = None,
    accessTokenDuration: Option[Long] = None,
    refreshTokenDuration: Option[Long] = None,
    tokenExchangePermitted: Option[Boolean] = None
)

object ClientExtension {

  given jsonCodec: JsonValueCodec[ClientExtension] = JsonCodecMaker.make(codecMakerConfig)

  given encoderClientExtension: Encoder[ClientExtension] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        t.requestableScopes.map(v => "requestableScopes" -> v.asJson),
        t.requestableScopesEnabled.map(v => "requestableScopesEnabled" -> v.asJson),
        t.accessTokenDuration.map(v => "accessTokenDuration" -> v.asJson),
        t.refreshTokenDuration.map(v => "refreshTokenDuration" -> v.asJson),
        t.tokenExchangePermitted.map(v => "tokenExchangePermitted" -> v.asJson)
      ).flatten
    }
  }

  given decoderClientExtension: Decoder[ClientExtension] = Decoder.instance { c =>
    for {
      requestableScopes        <- c.downField("requestableScopes").as[Option[Seq[String]]]
      requestableScopesEnabled <- c.downField("requestableScopesEnabled").as[Option[Boolean]]
      accessTokenDuration      <- c.downField("accessTokenDuration").as[Option[Long]]
      refreshTokenDuration     <- c.downField("refreshTokenDuration").as[Option[Long]]
      tokenExchangePermitted   <- c.downField("tokenExchangePermitted").as[Option[Boolean]]
    } yield ClientExtension(
      requestableScopes = requestableScopes,
      requestableScopesEnabled = requestableScopesEnabled,
      accessTokenDuration = accessTokenDuration,
      refreshTokenDuration = refreshTokenDuration,
      tokenExchangePermitted = tokenExchangePermitted
    )
  }

}
