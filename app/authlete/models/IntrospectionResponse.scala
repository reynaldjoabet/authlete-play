/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param resultCode
  *   The code which represents the result of the API call.
  * @param resultMessage
  *   A short message which explains the result of the API call.
  * @param action
  * @param responseContent
  *   The content that the authorization server implementation can use as the value of
  *   `WWW-Authenticate` header on errors.
  * @param clientId
  *   The client ID.
  * @param clientIdAlias
  *   The client ID alias when the token request was made. If the client did not have an alias, this
  *   parameter is `null`. Also, if the token request was invalid and it failed to identify a
  *   client, this parameter is `null`.
  * @param clientIdAliasUsed
  *   The flag which indicates whether the client ID alias was used when the token request was made.
  *   `true` if the client ID alias was used when the token request was made.
  * @param expiresAt
  *   The time at which the access token expires. The value is represented in milliseconds since the
  *   Unix epoch (1970-01-01).
  * @param subject
  *   The subject who is associated with the access token. The value of this property is `null` if
  *   the access token was issued using the flow of [Client Credentials
  *   Grant](tools.ietf.org/html/rfc6749#section-4.4).
  * @param scopes
  *   The scopes covered by the access token.
  * @param existent
  *   `true` if the access token exists.
  * @param usable
  *   true` if the access token is usable (= exists and has not expired).
  * @param sufficient
  *   `true` if the access token exists.
  * @param refreshable
  *   `true` if the access token can be refreshed using the associated refresh token which had been
  *   issued along with the access token. `false` if the refresh token for the access token has
  *   expired or the access token has no associated refresh token.
  * @param properties
  *   The extra properties associated with the access token.
  * @param certificateThumbprint
  *   The client certificate thumbprint used to validate the access token.
  * @param resources
  *   The target resources. This represents the resources specified by the `resource` request
  *   parameters or by the `resource` property in the request object. See \"Resource Indicators for
  *   OAuth 2.0\" for details.
  * @param accessTokenResources
  *   The target resources this proeprty holds may be the same as or different from the ones
  *   `resource` property holds. In some flows, the initial request and the subsequent token request
  *   are sent to different endpoints. Example flows are the Authorization Code Flow, the Refresh
  *   Token Flow, the CIBA Ping Mode, the CIBA Poll Mode and the Device Flow. In these flows, not
  *   only the initial request but also the subsequent token request can include the `resource`
  *   request parameters. The purpose of the `resource` request parameters in the token request is
  *   to narrow the range of the target resources from the original set of target resources
  *   requested by the preceding initial request. If narrowing down is performed, the target
  *   resources holded by the `resource` proeprty and the ones holded by this property are
  *   different. This property holds the narrowed set of target resources. See \"Resource Indicators
  *   for OAuth 2.0\" for details.
  * @param authorizationDetails
  * @param serviceAttributes
  *   The attributes of this service that the client application belongs to.
  * @param clientAttributes
  *   The attributes of the client.
  * @param scopeDetails
  *   The scopes property of this class is a list of scope names. The property does not hold
  *   information about scope attributes. This scopeDetails property was newly created to convey
  *   information about scope attributes.
  * @param grantId
  *   The value of the `grant_id` request parameter of the device authorization request. The
  *   `grant_id` request parameter is defined in [Grant Management for OAuth
  *   2.0](https://openid.net/specs/fapi-grant-management.html) , which is supported by Authlete 2.3
  *   and newer versions.
  * @param grant
  * @param forExternalAttachment
  *   the flag which indicates whether the access token is for an external attachment.
  * @param consentedClaims
  *   the claims that the user has consented for the client application to know.
  * @param grantType
  * @param acr
  *   The Authentication Context Class Reference of the user authentication that the authorization
  *   server performed during the course of issuing the access token.
  * @param authTime
  *   The time when the user authentication was performed during the course of issuing the access
  *   token.
  * @param clientEntityId
  *   The entity ID of the client.
  * @param clientEntityIdUsed
  *   Flag which indicates whether the entity ID of the client was used when the request for the
  *   access token was made.
  */
case class IntrospectionResponse(
    resultCode: Option[String] = None,
    resultMessage: Option[String] = None,
    action: Option[IntrospectionResponseAction] = None,
    responseContent: Option[String] = None,
    clientId: Option[Long] = None,
    clientIdAlias: Option[String] = None,
    clientIdAliasUsed: Option[Boolean] = None,
    expiresAt: Option[Long] = None,
    subject: Option[String] = None,
    scopes: Option[Seq[String]] = None,
    existent: Option[Boolean] = None,
    usable: Option[Boolean] = None,
    sufficient: Option[Boolean] = None,
    refreshable: Option[Boolean] = None,
    properties: Option[Seq[Property]] = None,
    certificateThumbprint: Option[String] = None,
    resources: Option[Seq[String]] = None,
    accessTokenResources: Option[Seq[String]] = None,
    authorizationDetails: Option[AuthzDetails] = None,
    serviceAttributes: Option[Seq[Pair]] = None,
    clientAttributes: Option[Seq[Pair]] = None,
    scopeDetails: Option[Seq[Scope]] = None,
    grantId: Option[String] = None,
    grant: Option[Grant] = None,
    forExternalAttachment: Option[Boolean] = None,
    consentedClaims: Option[Seq[String]] = None,
    grantType: Option[GrantType] = None,
    acr: Option[String] = None,
    authTime: Option[Long] = None,
    clientEntityId: Option[String] = None,
    clientEntityIdUsed: Option[Boolean] = None
)

object IntrospectionResponse {

  given jsonCodec: JsonValueCodec[IntrospectionResponse] = JsonCodecMaker.make(codecMakerConfig)

  given encoderIntrospectionResponse: Encoder[IntrospectionResponse] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        t.resultCode.map(v => "resultCode" -> v.asJson),
        t.resultMessage.map(v => "resultMessage" -> v.asJson),
        t.action.map(v => "action" -> v.asJson),
        t.responseContent.map(v => "responseContent" -> v.asJson),
        t.clientId.map(v => "clientId" -> v.asJson),
        t.clientIdAlias.map(v => "clientIdAlias" -> v.asJson),
        t.clientIdAliasUsed.map(v => "clientIdAliasUsed" -> v.asJson),
        t.expiresAt.map(v => "expiresAt" -> v.asJson),
        t.subject.map(v => "subject" -> v.asJson),
        t.scopes.map(v => "scopes" -> v.asJson),
        t.existent.map(v => "existent" -> v.asJson),
        t.usable.map(v => "usable" -> v.asJson),
        t.sufficient.map(v => "sufficient" -> v.asJson),
        t.refreshable.map(v => "refreshable" -> v.asJson),
        t.properties.map(v => "properties" -> v.asJson),
        t.certificateThumbprint.map(v => "certificateThumbprint" -> v.asJson),
        t.resources.map(v => "resources" -> v.asJson),
        t.accessTokenResources.map(v => "accessTokenResources" -> v.asJson),
        t.authorizationDetails.map(v => "authorizationDetails" -> v.asJson),
        t.serviceAttributes.map(v => "serviceAttributes" -> v.asJson),
        t.clientAttributes.map(v => "clientAttributes" -> v.asJson),
        t.scopeDetails.map(v => "scopeDetails" -> v.asJson),
        t.grantId.map(v => "grantId" -> v.asJson),
        t.grant.map(v => "grant" -> v.asJson),
        t.forExternalAttachment.map(v => "forExternalAttachment" -> v.asJson),
        t.consentedClaims.map(v => "consentedClaims" -> v.asJson),
        t.grantType.map(v => "grantType" -> v.asJson),
        t.acr.map(v => "acr" -> v.asJson),
        t.authTime.map(v => "authTime" -> v.asJson),
        t.clientEntityId.map(v => "clientEntityId" -> v.asJson),
        t.clientEntityIdUsed.map(v => "clientEntityIdUsed" -> v.asJson)
      ).flatten
    }
  }

  given decoderIntrospectionResponse: Decoder[IntrospectionResponse] = Decoder.instance { c =>
    for {
      resultCode            <- c.downField("resultCode").as[Option[String]]
      resultMessage         <- c.downField("resultMessage").as[Option[String]]
      action                <- mapEmptyStringToNull(c.downField("action")).as[Option[IntrospectionResponseAction]]
      responseContent       <- c.downField("responseContent").as[Option[String]]
      clientId              <- c.downField("clientId").as[Option[Long]]
      clientIdAlias         <- c.downField("clientIdAlias").as[Option[String]]
      clientIdAliasUsed     <- c.downField("clientIdAliasUsed").as[Option[Boolean]]
      expiresAt             <- c.downField("expiresAt").as[Option[Long]]
      subject               <- c.downField("subject").as[Option[String]]
      scopes                <- c.downField("scopes").as[Option[Seq[String]]]
      existent              <- c.downField("existent").as[Option[Boolean]]
      usable                <- c.downField("usable").as[Option[Boolean]]
      sufficient            <- c.downField("sufficient").as[Option[Boolean]]
      refreshable           <- c.downField("refreshable").as[Option[Boolean]]
      properties            <- c.downField("properties").as[Option[Seq[Property]]]
      certificateThumbprint <- c.downField("certificateThumbprint").as[Option[String]]
      resources             <- c.downField("resources").as[Option[Seq[String]]]
      accessTokenResources  <- c.downField("accessTokenResources").as[Option[Seq[String]]]
      authorizationDetails  <- c.downField("authorizationDetails").as[Option[AuthzDetails]]
      serviceAttributes     <- c.downField("serviceAttributes").as[Option[Seq[Pair]]]
      clientAttributes      <- c.downField("clientAttributes").as[Option[Seq[Pair]]]
      scopeDetails          <- c.downField("scopeDetails").as[Option[Seq[Scope]]]
      grantId               <- c.downField("grantId").as[Option[String]]
      grant                 <- c.downField("grant").as[Option[Grant]]
      forExternalAttachment <- c.downField("forExternalAttachment").as[Option[Boolean]]
      consentedClaims       <- c.downField("consentedClaims").as[Option[Seq[String]]]
      grantType             <- mapEmptyStringToNull(c.downField("grantType")).as[Option[GrantType]]
      acr                   <- c.downField("acr").as[Option[String]]
      authTime              <- c.downField("authTime").as[Option[Long]]
      clientEntityId        <- c.downField("clientEntityId").as[Option[String]]
      clientEntityIdUsed    <- c.downField("clientEntityIdUsed").as[Option[Boolean]]
    } yield IntrospectionResponse(
      resultCode = resultCode,
      resultMessage = resultMessage,
      action = action,
      responseContent = responseContent,
      clientId = clientId,
      clientIdAlias = clientIdAlias,
      clientIdAliasUsed = clientIdAliasUsed,
      expiresAt = expiresAt,
      subject = subject,
      scopes = scopes,
      existent = existent,
      usable = usable,
      sufficient = sufficient,
      refreshable = refreshable,
      properties = properties,
      certificateThumbprint = certificateThumbprint,
      resources = resources,
      accessTokenResources = accessTokenResources,
      authorizationDetails = authorizationDetails,
      serviceAttributes = serviceAttributes,
      clientAttributes = clientAttributes,
      scopeDetails = scopeDetails,
      grantId = grantId,
      grant = grant,
      forExternalAttachment = forExternalAttachment,
      consentedClaims = consentedClaims,
      grantType = grantType,
      acr = acr,
      authTime = authTime,
      clientEntityId = clientEntityId,
      clientEntityIdUsed = clientEntityIdUsed
    )
  }

}
