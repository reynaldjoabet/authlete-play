/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  */
enum ResponseType(val value: String) derives ConfiguredJsonValueCodec {

  case NONE             extends ResponseType("NONE")
  case CODE             extends ResponseType("CODE")
  case TOKEN            extends ResponseType("TOKEN")
  case IDTOKEN          extends ResponseType("ID_TOKEN")
  case CODETOKEN        extends ResponseType("CODE_TOKEN")
  case CODEIDTOKEN      extends ResponseType("CODE_ID_TOKEN")
  case IDTOKENTOKEN     extends ResponseType("ID_TOKEN_TOKEN")
  case CODEIDTOKENTOKEN extends ResponseType("CODE_ID_TOKEN_TOKEN")

}

object ResponseType {

  def withValueOpt(value: String): Option[ResponseType] = ResponseType.values.find(_.value == value)

  def withValue(value: String): ResponseType =
    withValueOpt(value).getOrElse(
      throw java.lang.IllegalArgumentException(s"ResponseType enum case not found: $value")
    )

  given decoderResponseType: Decoder[ResponseType] = Decoder.decodeString.map(withValue)

  given encoderResponseType: Encoder[ResponseType] = Encoder
    .encodeString
    .contramap[ResponseType](_.value)

}
