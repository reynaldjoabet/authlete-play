/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
  * Depending upon the context, this refers to encryption done by the client or by the server. For
  * instance: - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by
  * server when creating a JARM response - as `requestEncryptionEnc` value, it refers to the
  * expected encryption algorithm used by the client when encrypting a Request Object - as
  * `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
  */
enum JweEnc(val value: String) derives ConfiguredJsonValueCodec {

  case A128CBCHS256 extends JweEnc("A128CBC_HS256")
  case A192CBCHS384 extends JweEnc("A192CBC_HS384")
  case A256CBCHS512 extends JweEnc("A256CBC_HS512")
  case A128GCM      extends JweEnc("A128GCM")
  case A192GCM      extends JweEnc("A192GCM")
  case A256GCM      extends JweEnc("A256GCM")

}

object JweEnc {

  def withValueOpt(value: String): Option[JweEnc] = JweEnc.values.find(_.value == value)

  def withValue(value: String): JweEnc =
    withValueOpt(value).getOrElse(
      throw java.lang.IllegalArgumentException(s"JweEnc enum case not found: $value")
    )

  given decoderJweEnc: Decoder[JweEnc] = Decoder.decodeString.map(withValue)
  given encoderJweEnc: Encoder[JweEnc] = Encoder.encodeString.contramap[JweEnc](_.value)

}
