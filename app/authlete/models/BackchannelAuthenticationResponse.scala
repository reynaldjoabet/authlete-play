/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param resultCode
  *   The code which represents the result of the API call.
  * @param resultMessage
  *   A short message which explains the result of the API call.
  * @param action
  * @param responseContent
  *   The content that the authorization server implementation is to return to the client
  *   application. Its format varies depending on the value of `action` parameter.
  * @param clientId
  *   The client ID of the client application that has made the backchannel authentication request.
  * @param clientIdAlias
  *   The client ID alias of the client application that has made the backchannel authentication
  *   request.
  * @param clientIdAliasUsed
  *   `true` if the value of the client_id request parameter included in the backchannel
  *   authentication request is the client ID alias. `false` if the value is the original numeric
  *   client ID.
  * @param clientName
  *   The name of the client application which has made the backchannel authentication request.
  * @param scopes
  *   The scopes requested by the backchannel authentication request. Basically, this property holds
  *   the value of the `scope` request parameter in the backchannel authentication request. However,
  *   because unregistered scopes are dropped on Authlete side, if the `scope` request parameter
  *   contains unknown scopes, the list returned by this property becomes different from the value
  *   of the `scope` request parameter. Note that `description` property and `descriptions` property
  *   of each `scope` object in the array contained in this property is always null even if
  *   descriptions of the scopes are registered.
  * @param claimNames
  *   The names of the claims which were requested indirectly via some special scopes. See [5.4.
  *   Requesting Claims using Scope
  *   Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims) in OpenID Connect
  *   Core 1.0 for details.
  * @param clientNotificationToken
  *   The client notification token included in the backchannel authentication request.
  * @param acrs
  *   The list of ACR values requested by the backchannel authentication request. Basically, this
  *   property holds the value of the `acr_values` request parameter in the backchannel
  *   authentication request. However, because unsupported ACR values are dropped on Authlete side,
  *   if the `acr_values` request parameter contains unrecognized ACR values, the list returned by
  *   this property becomes different from the value of the `acr_values` request parameter.
  * @param hintType
  *   The type of the hint for end-user identification which was included in the backchannel
  *   authentication request.
  * @param hint
  *   The value of the hint for end-user identification.
  * @param sub
  *   The value of the `sub` claim contained in the ID token hint included in the backchannel
  *   authentication request.
  * @param bindingMessage
  *   The binding message included in the backchannel authentication request.
  * @param userCode
  *   The binding message included in the backchannel authentication request.
  * @param userCodeRequired
  *   The flag which indicates whether a user code is required. `true` when both the
  *   `backchannel_user_code_parameter` metadata of the client (= Client's `bcUserCodeRequired`
  *   property) and the `backchannel_user_code_parameter_supported` metadata of the service (=
  *   Service's `backchannelUserCodeParameterSupported` property) are `true`.
  * @param requestedExpiry
  *   The requested expiry for the authentication request ID (`auth_req_id`).
  * @param requestContext
  *   The request context of the backchannel authentication request. It is the value of the
  *   request_context claim in the signed authentication request and its format is JSON.
  *   request_context is a new claim added by the FAPI-CIBA profile.
  * @param warnings
  *   The warnings raised during processing the backchannel authentication request.
  * @param ticket
  *   The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue`
  *   API. This parameter has a value only if the value of `grant_type` request parameter is
  *   `password` and the token request is valid.
  * @param resources
  *   The resources specified by the `resource` request parameters or by the `resource` property in
  *   the request object. If both are given, the values in the request object should be set. See
  *   \"Resource Indicators for OAuth 2.0\" for details.
  * @param authorizationDetails
  * @param serviceAttributes
  *   The attributes of this service that the client application belongs to.
  * @param clientAttributes
  *   The attributes of the client.
  * @param dynamicScopes
  *   The dynamic scopes which the client application requested by the scope request parameter.
  * @param deliveryMode
  * @param gmAction
  * @param grantId
  *   the value of the `grant_id` request parameter of the device authorization request. The
  *   `grant_id` request parameter is defined in [Grant Management for OAuth
  *   2.0](https://openid.net/specs/fapi-grant-management.html) , which is supported by Authlete 2.3
  *   and newer versions.
  * @param grant
  * @param grantSubject
  *   The subject identifying the user who has given the grant identified by the `grant_id` request
  *   parameter of the device authorization request. Authlete 2.3 and newer versions support <a
  *   href= \"https://openid.net/specs/fapi-grant-management.html\">Grant Management for OAuth
  *   2.0</a>. An authorization request may contain a `grant_id` request parameter which is defined
  *   in the specification. If the value of the request parameter is valid,
  *   {@link #getGrantSubject()} will return the subject of the user who has given the grant to the
  *   client application. Authorization server implementations may use the value returned from
  *   {@link #getGrantSubject()} in order to determine the user to authenticate. The user your
  *   system will authenticate during the authorization process (or has already authenticated) may
  *   be different from the user of the grant. The first implementer's draft of \"Grant Management
  *   for OAuth 2.0\" does not mention anything about the case, so the behavior in the case is left
  *   to implementations. Authlete will not perform the grant management action when the `subject`
  *   passed to Authlete does not match the user of the grant.
  * @param clientEntityId
  *   The entity ID of the client.
  * @param clientEntityIdUsed
  *   Flag which indicates whether the entity ID of the client was used when the request for the
  *   access token was made.
  */
case class BackchannelAuthenticationResponse(
    resultCode: Option[String] = None,
    resultMessage: Option[String] = None,
    action: Option[BackchannelAuthenticationResponseAction] = None,
    responseContent: Option[String] = None,
    clientId: Option[Long] = None,
    clientIdAlias: Option[String] = None,
    clientIdAliasUsed: Option[Boolean] = None,
    clientName: Option[String] = None,
    scopes: Option[Seq[Scope]] = None,
    claimNames: Option[Seq[String]] = None,
    clientNotificationToken: Option[String] = None,
    acrs: Option[Seq[String]] = None,
    hintType: Option[String] = None,
    hint: Option[String] = None,
    sub: Option[String] = None,
    bindingMessage: Option[String] = None,
    userCode: Option[String] = None,
    userCodeRequired: Option[Boolean] = None,
    requestedExpiry: Option[Int] = None,
    requestContext: Option[String] = None,
    warnings: Option[Seq[String]] = None,
    ticket: Option[String] = None,
    resources: Option[Seq[String]] = None,
    authorizationDetails: Option[AuthzDetails] = None,
    serviceAttributes: Option[Seq[Pair]] = None,
    clientAttributes: Option[Seq[Pair]] = None,
    dynamicScopes: Option[Seq[DynamicScope]] = None,
    deliveryMode: Option[DeliveryMode] = None,
    gmAction: Option[GrantManagementAction] = None,
    grantId: Option[String] = None,
    grant: Option[Grant] = None,
    grantSubject: Option[String] = None,
    clientEntityId: Option[String] = None,
    clientEntityIdUsed: Option[Boolean] = None
)

object BackchannelAuthenticationResponse {

  given jsonCodec: JsonValueCodec[BackchannelAuthenticationResponse] =
    JsonCodecMaker.make(codecMakerConfig)

  given encoderBackchannelAuthenticationResponse: Encoder[BackchannelAuthenticationResponse] =
    Encoder.instance { t =>
      Json.fromFields {
        Seq(
          t.resultCode.map(v => "resultCode" -> v.asJson),
          t.resultMessage.map(v => "resultMessage" -> v.asJson),
          t.action.map(v => "action" -> v.asJson),
          t.responseContent.map(v => "responseContent" -> v.asJson),
          t.clientId.map(v => "clientId" -> v.asJson),
          t.clientIdAlias.map(v => "clientIdAlias" -> v.asJson),
          t.clientIdAliasUsed.map(v => "clientIdAliasUsed" -> v.asJson),
          t.clientName.map(v => "clientName" -> v.asJson),
          t.scopes.map(v => "scopes" -> v.asJson),
          t.claimNames.map(v => "claimNames" -> v.asJson),
          t.clientNotificationToken.map(v => "clientNotificationToken" -> v.asJson),
          t.acrs.map(v => "acrs" -> v.asJson),
          t.hintType.map(v => "hintType" -> v.asJson),
          t.hint.map(v => "hint" -> v.asJson),
          t.sub.map(v => "sub" -> v.asJson),
          t.bindingMessage.map(v => "bindingMessage" -> v.asJson),
          t.userCode.map(v => "userCode" -> v.asJson),
          t.userCodeRequired.map(v => "userCodeRequired" -> v.asJson),
          t.requestedExpiry.map(v => "requestedExpiry" -> v.asJson),
          t.requestContext.map(v => "requestContext" -> v.asJson),
          t.warnings.map(v => "warnings" -> v.asJson),
          t.ticket.map(v => "ticket" -> v.asJson),
          t.resources.map(v => "resources" -> v.asJson),
          t.authorizationDetails.map(v => "authorizationDetails" -> v.asJson),
          t.serviceAttributes.map(v => "serviceAttributes" -> v.asJson),
          t.clientAttributes.map(v => "clientAttributes" -> v.asJson),
          t.dynamicScopes.map(v => "dynamicScopes" -> v.asJson),
          t.deliveryMode.map(v => "deliveryMode" -> v.asJson),
          t.gmAction.map(v => "gmAction" -> v.asJson),
          t.grantId.map(v => "grantId" -> v.asJson),
          t.grant.map(v => "grant" -> v.asJson),
          t.grantSubject.map(v => "grantSubject" -> v.asJson),
          t.clientEntityId.map(v => "clientEntityId" -> v.asJson),
          t.clientEntityIdUsed.map(v => "clientEntityIdUsed" -> v.asJson)
        ).flatten
      }
    }

  given decoderBackchannelAuthenticationResponse: Decoder[BackchannelAuthenticationResponse] =
    Decoder.instance { c =>
      for {
        resultCode    <- c.downField("resultCode").as[Option[String]]
        resultMessage <- c.downField("resultMessage").as[Option[String]]
        action <- mapEmptyStringToNull(c.downField("action")).as[Option[
                    BackchannelAuthenticationResponseAction
                  ]]
        responseContent         <- c.downField("responseContent").as[Option[String]]
        clientId                <- c.downField("clientId").as[Option[Long]]
        clientIdAlias           <- c.downField("clientIdAlias").as[Option[String]]
        clientIdAliasUsed       <- c.downField("clientIdAliasUsed").as[Option[Boolean]]
        clientName              <- c.downField("clientName").as[Option[String]]
        scopes                  <- c.downField("scopes").as[Option[Seq[Scope]]]
        claimNames              <- c.downField("claimNames").as[Option[Seq[String]]]
        clientNotificationToken <- c.downField("clientNotificationToken").as[Option[String]]
        acrs                    <- c.downField("acrs").as[Option[Seq[String]]]
        hintType                <- c.downField("hintType").as[Option[String]]
        hint                    <- c.downField("hint").as[Option[String]]
        sub                     <- c.downField("sub").as[Option[String]]
        bindingMessage          <- c.downField("bindingMessage").as[Option[String]]
        userCode                <- c.downField("userCode").as[Option[String]]
        userCodeRequired        <- c.downField("userCodeRequired").as[Option[Boolean]]
        requestedExpiry         <- c.downField("requestedExpiry").as[Option[Int]]
        requestContext          <- c.downField("requestContext").as[Option[String]]
        warnings                <- c.downField("warnings").as[Option[Seq[String]]]
        ticket                  <- c.downField("ticket").as[Option[String]]
        resources               <- c.downField("resources").as[Option[Seq[String]]]
        authorizationDetails    <- c.downField("authorizationDetails").as[Option[AuthzDetails]]
        serviceAttributes       <- c.downField("serviceAttributes").as[Option[Seq[Pair]]]
        clientAttributes        <- c.downField("clientAttributes").as[Option[Seq[Pair]]]
        dynamicScopes           <- c.downField("dynamicScopes").as[Option[Seq[DynamicScope]]]
        deliveryMode            <- mapEmptyStringToNull(c.downField("deliveryMode")).as[Option[DeliveryMode]]
        gmAction                <- mapEmptyStringToNull(c.downField("gmAction")).as[Option[GrantManagementAction]]
        grantId                 <- c.downField("grantId").as[Option[String]]
        grant                   <- c.downField("grant").as[Option[Grant]]
        grantSubject            <- c.downField("grantSubject").as[Option[String]]
        clientEntityId          <- c.downField("clientEntityId").as[Option[String]]
        clientEntityIdUsed      <- c.downField("clientEntityIdUsed").as[Option[Boolean]]
      } yield BackchannelAuthenticationResponse(
        resultCode = resultCode,
        resultMessage = resultMessage,
        action = action,
        responseContent = responseContent,
        clientId = clientId,
        clientIdAlias = clientIdAlias,
        clientIdAliasUsed = clientIdAliasUsed,
        clientName = clientName,
        scopes = scopes,
        claimNames = claimNames,
        clientNotificationToken = clientNotificationToken,
        acrs = acrs,
        hintType = hintType,
        hint = hint,
        sub = sub,
        bindingMessage = bindingMessage,
        userCode = userCode,
        userCodeRequired = userCodeRequired,
        requestedExpiry = requestedExpiry,
        requestContext = requestContext,
        warnings = warnings,
        ticket = ticket,
        resources = resources,
        authorizationDetails = authorizationDetails,
        serviceAttributes = serviceAttributes,
        clientAttributes = clientAttributes,
        dynamicScopes = dynamicScopes,
        deliveryMode = deliveryMode,
        gmAction = gmAction,
        grantId = grantId,
        grant = grant,
        grantSubject = grantSubject,
        clientEntityId = clientEntityId,
        clientEntityIdUsed = clientEntityIdUsed
      )
    }

}
