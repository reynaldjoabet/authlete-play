/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param resultCode
  *   The code which represents the result of the API call.
  * @param resultMessage
  *   A short message which explains the result of the API call.
  * @param valid
  *   The result of the verification on the JOSE object.
  * @param signatureValid
  *   The result of the signature verification.
  * @param missingClaims
  *   The list of missing claims.
  * @param invalidClaims
  *   The list of invalid claims.
  * @param errorDescriptions
  *   The list of error messages.
  */
case class JoseVerifyResponse(
    resultCode: Option[String] = None,
    resultMessage: Option[String] = None,
    valid: Option[Boolean] = None,
    signatureValid: Option[Boolean] = None,
    missingClaims: Option[Seq[String]] = None,
    invalidClaims: Option[Seq[String]] = None,
    errorDescriptions: Option[Seq[String]] = None
)

object JoseVerifyResponse {

  given jsonCodec: JsonValueCodec[JoseVerifyResponse] = JsonCodecMaker.make(codecMakerConfig)

  given encoderJoseVerifyResponse: Encoder[JoseVerifyResponse] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        t.resultCode.map(v => "resultCode" -> v.asJson),
        t.resultMessage.map(v => "resultMessage" -> v.asJson),
        t.valid.map(v => "valid" -> v.asJson),
        t.signatureValid.map(v => "signatureValid" -> v.asJson),
        t.missingClaims.map(v => "missingClaims" -> v.asJson),
        t.invalidClaims.map(v => "invalidClaims" -> v.asJson),
        t.errorDescriptions.map(v => "errorDescriptions" -> v.asJson)
      ).flatten
    }
  }

  given decoderJoseVerifyResponse: Decoder[JoseVerifyResponse] = Decoder.instance { c =>
    for {
      resultCode        <- c.downField("resultCode").as[Option[String]]
      resultMessage     <- c.downField("resultMessage").as[Option[String]]
      valid             <- c.downField("valid").as[Option[Boolean]]
      signatureValid    <- c.downField("signatureValid").as[Option[Boolean]]
      missingClaims     <- c.downField("missingClaims").as[Option[Seq[String]]]
      invalidClaims     <- c.downField("invalidClaims").as[Option[Seq[String]]]
      errorDescriptions <- c.downField("errorDescriptions").as[Option[Seq[String]]]
    } yield JoseVerifyResponse(
      resultCode = resultCode,
      resultMessage = resultMessage,
      valid = valid,
      signatureValid = signatureValid,
      missingClaims = missingClaims,
      invalidClaims = invalidClaims,
      errorDescriptions = errorDescriptions
    )
  }

}
