/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * this is the 'alg' header value for encrypted JWT tokens. Depending upon the context, this refers
  * to key transport scheme to be used by the client and by the server. For instance: - as
  * `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for
  * transporting they keys on JARM objects - as `requestEncryptionAlg` value, it refers to the
  * expected key transport encoding algorithm that server expect from client when encrypting a
  * Request Object - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server
  * to key transport of id_tokens **Please note that some of the algorithms are more secure than
  * others, some are not supported very well cross platforms and some (like RSA1_5) is known to be
  * weak**.
  */
enum JweAlg(val value: String) derives ConfiguredJsonValueCodec {

  case RSA15            extends JweAlg("RSA1_5")
  case RSAOAEP          extends JweAlg("RSA_OAEP")
  case RSAOAEP256       extends JweAlg("RSA_OAEP_256")
  case A128KW           extends JweAlg("A128KW")
  case A192KW           extends JweAlg("A192KW")
  case A256KW           extends JweAlg("A256KW")
  case DIR              extends JweAlg("DIR")
  case ECDHES           extends JweAlg("ECDH_ES")
  case ECDHESA128KW     extends JweAlg("ECDH_ES_A128KW")
  case ECDHESA192KW     extends JweAlg("ECDH_ES_A192KW")
  case ECDHESA256KW     extends JweAlg("ECDH_ES_A256KW")
  case A128GCMKW        extends JweAlg("A128GCMKW")
  case A192GCMKW        extends JweAlg("A192GCMKW")
  case A256GCMKW        extends JweAlg("A256GCMKW")
  case PBES2HS256A128KW extends JweAlg("PBES2_HS256_A128KW")
  case PBES2HS384A192KW extends JweAlg("PBES2_HS384_A192KW")
  case PBES2HS512A256KW extends JweAlg("PBES2_HS512_A256KW")

}

object JweAlg {

  def withValueOpt(value: String): Option[JweAlg] = JweAlg.values.find(_.value == value)

  def withValue(value: String): JweAlg =
    withValueOpt(value).getOrElse(
      throw java.lang.IllegalArgumentException(s"JweAlg enum case not found: $value")
    )

  given decoderJweAlg: Decoder[JweAlg] = Decoder.decodeString.map(withValue)
  given encoderJweAlg: Encoder[JweAlg] = Encoder.encodeString.contramap[JweAlg](_.value)

}
