/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param parameters
  *   OAuth 2.0 token request parameters which are the request parameters that the OAuth 2.0 token
  *   endpoint of the authorization server implementation received from the client application. The
  *   value of parameters is the entire entity body (which is formatted in
  *   `application/x-www-form-urlencoded`) of the request from the client application.
  * @param clientId
  *   The client ID extracted from `Authorization` header of the token request from the client
  *   application. If the token endpoint of the authorization server implementation supports basic
  *   authentication as a means of client authentication, and the request from the client
  *   application contained its client ID in `Authorization` header, the value should be extracted
  *   and set to this parameter.
  * @param clientSecret
  *   The client secret extracted from `Authorization` header of the token request from the client
  *   application. If the token endpoint of the authorization server implementation supports basic
  *   authentication as a means of client authentication, and the request from the client
  *   application contained its client secret in `Authorization` header, the value should be
  *   extracted and set to this parameter.
  * @param clientCertificate
  *   The client certificate from the MTLS of the token request from the client application.
  * @param clientCertificatePath
  *   The certificate path presented by the client during client authentication. These certificates
  *   are strings in PEM format.
  * @param properties
  *   Extra properties to associate with an access token. See [Extra
  *   Properties](https://www.authlete.com/developers/definitive_guide/extra_properties/) for
  *   details.
  * @param dpop
  *   `DPoP` header presented by the client during the request to the token endpoint. The header
  *   contains a signed JWT which includes the public key that is paired with the private key used
  *   to sign the JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer
  *   (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.
  * @param htm
  *   HTTP method of the token request. This field is used to validate the `DPoP` header. In normal
  *   cases, the value is `POST`. When this parameter is omitted, `POST` is used as the default
  *   value. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer
  *   (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.
  * @param htu
  *   URL of the token endpoint. This field is used to validate the `DPoP` header. If this parameter
  *   is omitted, the `tokenEndpoint` property of the Service is used as the default value. See
  *   [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer
  *   (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.
  * @param accessToken
  *   The representation of an access token that may be issued as a result of the Authlete API call.
  * @param jwtAtClaims
  *   Additional claims that are added to the payload part of the JWT access token.
  */
case class TokenRequest(
    parameters: String,
    clientId: Option[String] = None,
    clientSecret: Option[String] = None,
    clientCertificate: Option[String] = None,
    clientCertificatePath: Option[String] = None,
    properties: Option[String] = None,
    dpop: Option[String] = None,
    htm: Option[String] = None,
    htu: Option[String] = None,
    accessToken: Option[String] = None,
    jwtAtClaims: Option[String] = None
)

object TokenRequest {

  given jsonCodec: JsonValueCodec[TokenRequest] = JsonCodecMaker.make(codecMakerConfig)

  given encoderTokenRequest: Encoder[TokenRequest] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        Some("parameters" -> t.parameters.asJson),
        t.clientId.map(v => "clientId" -> v.asJson),
        t.clientSecret.map(v => "clientSecret" -> v.asJson),
        t.clientCertificate.map(v => "clientCertificate" -> v.asJson),
        t.clientCertificatePath.map(v => "clientCertificatePath" -> v.asJson),
        t.properties.map(v => "properties" -> v.asJson),
        t.dpop.map(v => "dpop" -> v.asJson),
        t.htm.map(v => "htm" -> v.asJson),
        t.htu.map(v => "htu" -> v.asJson),
        t.accessToken.map(v => "accessToken" -> v.asJson),
        t.jwtAtClaims.map(v => "jwtAtClaims" -> v.asJson)
      ).flatten
    }
  }

  given decoderTokenRequest: Decoder[TokenRequest] = Decoder.instance { c =>
    for {
      parameters            <- c.downField("parameters").as[String]
      clientId              <- c.downField("clientId").as[Option[String]]
      clientSecret          <- c.downField("clientSecret").as[Option[String]]
      clientCertificate     <- c.downField("clientCertificate").as[Option[String]]
      clientCertificatePath <- c.downField("clientCertificatePath").as[Option[String]]
      properties            <- c.downField("properties").as[Option[String]]
      dpop                  <- c.downField("dpop").as[Option[String]]
      htm                   <- c.downField("htm").as[Option[String]]
      htu                   <- c.downField("htu").as[Option[String]]
      accessToken           <- c.downField("accessToken").as[Option[String]]
      jwtAtClaims           <- c.downField("jwtAtClaims").as[Option[String]]
    } yield TokenRequest(
      parameters = parameters,
      clientId = clientId,
      clientSecret = clientSecret,
      clientCertificate = clientCertificate,
      clientCertificatePath = clientCertificatePath,
      properties = properties,
      dpop = dpop,
      htm = htm,
      htu = htu,
      accessToken = accessToken,
      jwtAtClaims = jwtAtClaims
    )
  }

}
