/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client
  * Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1) for details.
  */
enum ClientType(val value: String) derives ConfiguredJsonValueCodec {

  case `PUBLIC`     extends ClientType("PUBLIC")
  case CONFIDENTIAL extends ClientType("CONFIDENTIAL")

}

object ClientType {

  def withValueOpt(value: String): Option[ClientType] = ClientType.values.find(_.value == value)

  def withValue(value: String): ClientType =
    withValueOpt(value).getOrElse(
      throw java.lang.IllegalArgumentException(s"ClientType enum case not found: $value")
    )

  given decoderClientType: Decoder[ClientType] = Decoder.decodeString.map(withValue)
  given encoderClientType: Encoder[ClientType] = Encoder.encodeString.contramap[ClientType](_.value)

}
