/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param accessTokenIdentifier
  *   The identifier of an access token to revoke The hash of an access token is recognized as an
  *   identifier as well as the access token itself.
  * @param refreshTokenIdentifier
  *   The identifier of a refresh token to revoke. The hash of a refresh token is recognized as an
  *   identifier as well as the refresh token itself.
  * @param clientIdentifier
  *   The client ID of the access token to be revoked. Both the numeric client ID and the alias are
  *   recognized as an identifier of a client.
  * @param subject
  *   The subject of a resource owner.
  */
case class TokenRevokeRequest(
    accessTokenIdentifier: Option[String] = None,
    refreshTokenIdentifier: Option[String] = None,
    clientIdentifier: Option[String] = None,
    subject: Option[String] = None
)

object TokenRevokeRequest {

  given jsonCodec: JsonValueCodec[TokenRevokeRequest] = JsonCodecMaker.make(codecMakerConfig)

  given encoderTokenRevokeRequest: Encoder[TokenRevokeRequest] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        t.accessTokenIdentifier.map(v => "accessTokenIdentifier" -> v.asJson),
        t.refreshTokenIdentifier.map(v => "refreshTokenIdentifier" -> v.asJson),
        t.clientIdentifier.map(v => "clientIdentifier" -> v.asJson),
        t.subject.map(v => "subject" -> v.asJson)
      ).flatten
    }
  }

  given decoderTokenRevokeRequest: Decoder[TokenRevokeRequest] = Decoder.instance { c =>
    for {
      accessTokenIdentifier  <- c.downField("accessTokenIdentifier").as[Option[String]]
      refreshTokenIdentifier <- c.downField("refreshTokenIdentifier").as[Option[String]]
      clientIdentifier       <- c.downField("clientIdentifier").as[Option[String]]
      subject                <- c.downField("subject").as[Option[String]]
    } yield TokenRevokeRequest(
      accessTokenIdentifier = accessTokenIdentifier,
      refreshTokenIdentifier = refreshTokenIdentifier,
      clientIdentifier = clientIdentifier,
      subject = subject
    )
  }

}
