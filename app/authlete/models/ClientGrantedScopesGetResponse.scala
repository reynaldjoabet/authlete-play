/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param resultCode
  *   The code which represents the result of the API call.
  * @param resultMessage
  *   A short message which explains the result of the API call.
  * @param serviceApiKey
  *   The API key of the service.
  * @param clientId
  *   The client ID.
  * @param subject
  *   the subject (= unique identifier) of the user who has granted authorization to the client.
  * @param latestGrantedScopes
  *   The scopes granted to the client application by the last authorization process by the user
  *   (who is identified by the subject). <p> `null` means that there is no record about granted
  *   scopes. An empty array means that there exists a record about granted scopes but no scope has
  *   been granted to the client application. If the returned array holds some elements, they are
  *   the scopes granted to the client application by the last authorization process. </p>
  * @param mergedGrantedScopes
  *   The scopes granted to the client application by all the past authorization processes. Note
  *   that revoked scopes are not included.
  * @param modifiedAt
  *   Get the timestamp in milliseconds since Unix epoch at which this record was modified.
  */
case class ClientGrantedScopesGetResponse(
    resultCode: Option[String] = None,
    resultMessage: Option[String] = None,
    serviceApiKey: Option[Long] = None,
    clientId: Option[Long] = None,
    subject: Option[String] = None,
    latestGrantedScopes: Option[Seq[String]] = None,
    mergedGrantedScopes: Option[Seq[String]] = None,
    modifiedAt: Option[Long] = None
)

object ClientGrantedScopesGetResponse {

  given jsonCodec: JsonValueCodec[ClientGrantedScopesGetResponse] =
    JsonCodecMaker.make(codecMakerConfig)

  given encoderClientGrantedScopesGetResponse: Encoder[ClientGrantedScopesGetResponse] = Encoder
    .instance { t =>
      Json.fromFields {
        Seq(
          t.resultCode.map(v => "resultCode" -> v.asJson),
          t.resultMessage.map(v => "resultMessage" -> v.asJson),
          t.serviceApiKey.map(v => "serviceApiKey" -> v.asJson),
          t.clientId.map(v => "clientId" -> v.asJson),
          t.subject.map(v => "subject" -> v.asJson),
          t.latestGrantedScopes.map(v => "latestGrantedScopes" -> v.asJson),
          t.mergedGrantedScopes.map(v => "mergedGrantedScopes" -> v.asJson),
          t.modifiedAt.map(v => "modifiedAt" -> v.asJson)
        ).flatten
      }
    }

  given decoderClientGrantedScopesGetResponse: Decoder[ClientGrantedScopesGetResponse] = Decoder
    .instance { c =>
      for {
        resultCode          <- c.downField("resultCode").as[Option[String]]
        resultMessage       <- c.downField("resultMessage").as[Option[String]]
        serviceApiKey       <- c.downField("serviceApiKey").as[Option[Long]]
        clientId            <- c.downField("clientId").as[Option[Long]]
        subject             <- c.downField("subject").as[Option[String]]
        latestGrantedScopes <- c.downField("latestGrantedScopes").as[Option[Seq[String]]]
        mergedGrantedScopes <- c.downField("mergedGrantedScopes").as[Option[Seq[String]]]
        modifiedAt          <- c.downField("modifiedAt").as[Option[Long]]
      } yield ClientGrantedScopesGetResponse(
        resultCode = resultCode,
        resultMessage = resultMessage,
        serviceApiKey = serviceApiKey,
        clientId = clientId,
        subject = subject,
        latestGrantedScopes = latestGrantedScopes,
        mergedGrantedScopes = mergedGrantedScopes,
        modifiedAt = modifiedAt
      )
    }

}
