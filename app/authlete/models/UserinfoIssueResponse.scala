/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param resultCode
  *   The code which represents the result of the API call.
  * @param resultMessage
  *   A short message which explains the result of the API call.
  * @param action
  * @param responseContent
  *   The content that the authorization server implementation can use as the value of
  *   `WWW-Authenticate` header on errors.
  * @param signature
  *   The signature header of the response message.
  * @param signatureInput
  *   The signature-input header of the response message
  * @param contentDigest
  *   The content-digest header of the response message
  */
case class UserinfoIssueResponse(
    resultCode: Option[String] = None,
    resultMessage: Option[String] = None,
    action: Option[UserinfoIssueResponseAction] = None,
    responseContent: Option[String] = None,
    signature: Option[String] = None,
    signatureInput: Option[String] = None,
    contentDigest: Option[String] = None
)

object UserinfoIssueResponse {

  given jsonCodec: JsonValueCodec[UserinfoIssueResponse] = JsonCodecMaker.make(codecMakerConfig)

  given encoderUserinfoIssueResponse: Encoder[UserinfoIssueResponse] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        t.resultCode.map(v => "resultCode" -> v.asJson),
        t.resultMessage.map(v => "resultMessage" -> v.asJson),
        t.action.map(v => "action" -> v.asJson),
        t.responseContent.map(v => "responseContent" -> v.asJson),
        t.signature.map(v => "signature" -> v.asJson),
        t.signatureInput.map(v => "signatureInput" -> v.asJson),
        t.contentDigest.map(v => "contentDigest" -> v.asJson)
      ).flatten
    }
  }

  given decoderUserinfoIssueResponse: Decoder[UserinfoIssueResponse] = Decoder.instance { c =>
    for {
      resultCode      <- c.downField("resultCode").as[Option[String]]
      resultMessage   <- c.downField("resultMessage").as[Option[String]]
      action          <- mapEmptyStringToNull(c.downField("action")).as[Option[UserinfoIssueResponseAction]]
      responseContent <- c.downField("responseContent").as[Option[String]]
      signature       <- c.downField("signature").as[Option[String]]
      signatureInput  <- c.downField("signatureInput").as[Option[String]]
      contentDigest   <- c.downField("contentDigest").as[Option[String]]
    } yield UserinfoIssueResponse(
      resultCode = resultCode,
      resultMessage = resultMessage,
      action = action,
      responseContent = responseContent,
      signature = signature,
      signatureInput = signatureInput,
      contentDigest = contentDigest
    )
  }

}
