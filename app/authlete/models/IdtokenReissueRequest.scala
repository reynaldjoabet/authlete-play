/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param accessToken
  *   <p> The value of this parameter should be (a) the value of the \"`jwtAccessToken`\" parameter
  *   in a response from the `/auth/token` API when the value is available, or (b) the value of the
  *   \"`accessToken`\" parameter in the response from the `/auth/token` API when the value of the
  *   \"`jwtAccessToken`\" parameter is not available. </p>
  * @param refreshToken
  *   <p> The value of this parameter should be the value of the \"`refreshToken`\" parameter in a
  *   response from the `/auth/token` API. </p>
  * @param sub
  *   The value that should be used as the value of the \"`sub`\" claim of the ID token. <p> This
  *   parameter is optional. When omitted, the value of the subject associated with the access token
  *   is used. </p>
  * @param claims
  *   Additional claims that should be embedded in the payload part of the ID token. The format is a
  *   JSON object. <p> This parameter is optional. </p>
  * @param idtHeaderParams
  *   Additional parameters that should be embedded in the JWS header of the ID token. The format is
  *   a JSON object. <p> This parameter is optional. </p>
  * @param idTokenAudType
  *   The type of the \"`aud`\" claim of the ID token being issued. <p> Valid values of this
  *   parameter are as follows. </p> <blockquote> <table border=\"1\" cellpadding=\"5\"
  *   style=\"border-collapse: collapse;\"> <tr bgcolor=\"orange\"> <th>Value</th>
  *   <th>Description</th> </tr> <tr> <td>\"`array`\"</td> <td>The type of the `aud` claim becomes
  *   an array of strings.</td> </tr> <tr> <td>\"`string`\"</td> <td>The type of the `aud` claim
  *   becomes a single string.</td> </tr> </table> </blockquote> <p> This parameter is optional, and
  *   the default value on omission is \"`array`\". </p> <p> This parameter takes precedence over
  *   the `idTokenAudType` property of {@link Service} (cf. {@link Service#getIdTokenAudType()}).
  *   </p>
  */
case class IdtokenReissueRequest(
    accessToken: String,
    refreshToken: String,
    sub: Option[String] = None,
    claims: Option[String] = None,
    idtHeaderParams: Option[String] = None,
    idTokenAudType: Option[String] = None
)

object IdtokenReissueRequest {

  given jsonCodec: JsonValueCodec[IdtokenReissueRequest] = JsonCodecMaker.make(codecMakerConfig)

  given encoderIdtokenReissueRequest: Encoder[IdtokenReissueRequest] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        Some("accessToken"  -> t.accessToken.asJson),
        Some("refreshToken" -> t.refreshToken.asJson),
        t.sub.map(v => "sub" -> v.asJson),
        t.claims.map(v => "claims" -> v.asJson),
        t.idtHeaderParams.map(v => "idtHeaderParams" -> v.asJson),
        t.idTokenAudType.map(v => "idTokenAudType" -> v.asJson)
      ).flatten
    }
  }

  given decoderIdtokenReissueRequest: Decoder[IdtokenReissueRequest] = Decoder.instance { c =>
    for {
      accessToken     <- c.downField("accessToken").as[String]
      refreshToken    <- c.downField("refreshToken").as[String]
      sub             <- c.downField("sub").as[Option[String]]
      claims          <- c.downField("claims").as[Option[String]]
      idtHeaderParams <- c.downField("idtHeaderParams").as[Option[String]]
      idTokenAudType  <- c.downField("idTokenAudType").as[Option[String]]
    } yield IdtokenReissueRequest(
      accessToken = accessToken,
      refreshToken = refreshToken,
      sub = sub,
      claims = claims,
      idtHeaderParams = idtHeaderParams,
      idTokenAudType = idTokenAudType
    )
  }

}
