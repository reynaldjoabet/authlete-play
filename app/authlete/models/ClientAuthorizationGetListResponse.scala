/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param start
  *   Start index of search results (inclusive).
  * @param end
  *   End index of search results (exclusive).
  * @param developer
  *   Unique ID of a client developer.
  * @param subject
  *   Unique user ID of an end-user.
  * @param totalCount
  *   Unique ID of a client developer.
  * @param clients
  *   An array of clients.
  */
case class ClientAuthorizationGetListResponse(
    start: Option[Int] = None,
    end: Option[Int] = None,
    developer: Option[String] = None,
    subject: Option[String] = None,
    totalCount: Option[Int] = None,
    clients: Option[Seq[Client]] = None
)

object ClientAuthorizationGetListResponse {

  given jsonCodec: JsonValueCodec[ClientAuthorizationGetListResponse] =
    JsonCodecMaker.make(codecMakerConfig)

  given encoderClientAuthorizationGetListResponse: Encoder[ClientAuthorizationGetListResponse] =
    Encoder.instance { t =>
      Json.fromFields {
        Seq(
          t.start.map(v => "start" -> v.asJson),
          t.end.map(v => "end" -> v.asJson),
          t.developer.map(v => "developer" -> v.asJson),
          t.subject.map(v => "subject" -> v.asJson),
          t.totalCount.map(v => "totalCount" -> v.asJson),
          t.clients.map(v => "clients" -> v.asJson)
        ).flatten
      }
    }

  given decoderClientAuthorizationGetListResponse: Decoder[ClientAuthorizationGetListResponse] =
    Decoder.instance { c =>
      for {
        start      <- c.downField("start").as[Option[Int]]
        end        <- c.downField("end").as[Option[Int]]
        developer  <- c.downField("developer").as[Option[String]]
        subject    <- c.downField("subject").as[Option[String]]
        totalCount <- c.downField("totalCount").as[Option[Int]]
        clients    <- c.downField("clients").as[Option[Seq[Client]]]
      } yield ClientAuthorizationGetListResponse(
        start = start,
        end = end,
        developer = developer,
        subject = subject,
        totalCount = totalCount,
        clients = clients
      )
    }

}
