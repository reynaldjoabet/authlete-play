/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * The subject type that the client application requests. Details about the subject type are
  * described in [OpenID Connect Core 1.0, 8. Subjct Identifier
  * Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes). This property
  * corresponds to `subject_type` in [OpenID Connect Dynamic Client Registration 1.0, 2. Client
  * Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
  */
enum SubjectType(val value: String) derives ConfiguredJsonValueCodec {

  case `PUBLIC` extends SubjectType("PUBLIC")
  case PAIRWISE extends SubjectType("PAIRWISE")

}

object SubjectType {

  def withValueOpt(value: String): Option[SubjectType] = SubjectType.values.find(_.value == value)

  def withValue(value: String): SubjectType =
    withValueOpt(value).getOrElse(
      throw java.lang.IllegalArgumentException(s"SubjectType enum case not found: $value")
    )

  given decoderSubjectType: Decoder[SubjectType] = Decoder.decodeString.map(withValue)

  given encoderSubjectType: Encoder[SubjectType] = Encoder
    .encodeString
    .contramap[SubjectType](_.value)

}
