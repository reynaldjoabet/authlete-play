/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param ticket
  *   The ticket issued from Authlete `/auth/authorization` API.
  * @param subject
  *   The subject (= a user account managed by the service) who has granted authorization to the
  *   client application.
  * @param authTime
  *   The time when the authentication of the end-user occurred. Its value is the number of seconds
  *   from `1970-01-01`.
  * @param acr
  *   The Authentication Context Class Reference performed for the end-user authentication.
  * @param claims
  *   The claims of the end-user (= pieces of information about the end-user) in JSON format. See
  *   [OpenID Connect Core 1.0, 5.1. Standard
  *   Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) for details
  *   about the format.
  * @param properties
  *   Extra properties to associate with an access token and/or an authorization code.
  * @param scopes
  *   Scopes to associate with an access token and/or an authorization code. If a non-empty string
  *   array is given, it replaces the scopes specified by the original authorization request.
  * @param sub
  *   The value of the `sub` claim to embed in an ID token. If this request parameter is `null` or
  *   empty, the value of the `subject` request parameter is used as the value of the `sub` claim.
  * @param idtHeaderParams
  *   JSON that represents additional JWS header parameters for ID tokens that may be issued based
  *   on the authorization request.
  * @param claimsForTx
  *   Claim key-value pairs that are used to compute transformed claims.
  * @param consentedClaims
  *   the claims that the user has consented for the client application to know.
  * @param authorizationDetails
  * @param jwtAtClaims
  *   Additional claims that are added to the payload part of the JWT access token.
  * @param accessToken
  *   The representation of an access token that may be issued as a result of the Authlete API call.
  */
case class AuthorizationIssueRequest(
    ticket: String,
    subject: String,
    authTime: Option[Long] = None,
    acr: Option[String] = None,
    claims: Option[String] = None,
    properties: Option[Seq[Property]] = None,
    scopes: Option[Seq[String]] = None,
    sub: Option[String] = None,
    idtHeaderParams: Option[String] = None,
    claimsForTx: Option[String] = None,
    consentedClaims: Option[Seq[String]] = None,
    authorizationDetails: Option[AuthzDetails] = None,
    jwtAtClaims: Option[String] = None,
    accessToken: Option[String] = None
)

object AuthorizationIssueRequest {

  given jsonCodec: JsonValueCodec[AuthorizationIssueRequest] = JsonCodecMaker.make(codecMakerConfig)

  given encoderAuthorizationIssueRequest: Encoder[AuthorizationIssueRequest] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        Some("ticket"  -> t.ticket.asJson),
        Some("subject" -> t.subject.asJson),
        t.authTime.map(v => "authTime" -> v.asJson),
        t.acr.map(v => "acr" -> v.asJson),
        t.claims.map(v => "claims" -> v.asJson),
        t.properties.map(v => "properties" -> v.asJson),
        t.scopes.map(v => "scopes" -> v.asJson),
        t.sub.map(v => "sub" -> v.asJson),
        t.idtHeaderParams.map(v => "idtHeaderParams" -> v.asJson),
        t.claimsForTx.map(v => "claimsForTx" -> v.asJson),
        t.consentedClaims.map(v => "consentedClaims" -> v.asJson),
        t.authorizationDetails.map(v => "authorizationDetails" -> v.asJson),
        t.jwtAtClaims.map(v => "jwtAtClaims" -> v.asJson),
        t.accessToken.map(v => "accessToken" -> v.asJson)
      ).flatten
    }
  }

  given decoderAuthorizationIssueRequest: Decoder[AuthorizationIssueRequest] = Decoder.instance { c =>
    for {
      ticket               <- c.downField("ticket").as[String]
      subject              <- c.downField("subject").as[String]
      authTime             <- c.downField("authTime").as[Option[Long]]
      acr                  <- c.downField("acr").as[Option[String]]
      claims               <- c.downField("claims").as[Option[String]]
      properties           <- c.downField("properties").as[Option[Seq[Property]]]
      scopes               <- c.downField("scopes").as[Option[Seq[String]]]
      sub                  <- c.downField("sub").as[Option[String]]
      idtHeaderParams      <- c.downField("idtHeaderParams").as[Option[String]]
      claimsForTx          <- c.downField("claimsForTx").as[Option[String]]
      consentedClaims      <- c.downField("consentedClaims").as[Option[Seq[String]]]
      authorizationDetails <- c.downField("authorizationDetails").as[Option[AuthzDetails]]
      jwtAtClaims          <- c.downField("jwtAtClaims").as[Option[String]]
      accessToken          <- c.downField("accessToken").as[Option[String]]
    } yield AuthorizationIssueRequest(
      ticket = ticket,
      subject = subject,
      authTime = authTime,
      acr = acr,
      claims = claims,
      properties = properties,
      scopes = scopes,
      sub = sub,
      idtHeaderParams = idtHeaderParams,
      claimsForTx = claimsForTx,
      consentedClaims = consentedClaims,
      authorizationDetails = authorizationDetails,
      jwtAtClaims = jwtAtClaims,
      accessToken = accessToken
    )
  }

}
