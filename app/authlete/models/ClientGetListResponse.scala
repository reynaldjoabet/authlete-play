/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param developer
  *   The developer of the client applications. If the request did not contain `developer` request
  *   parameter, this property is set to `null`.
  * @param start
  *   Start index (inclusive) of the result set of the query.
  * @param end
  *   End index (exclusive) of the result set of the query.
  * @param totalCount
  *   Total number of clients that belong to the service. This doesn't mean the number of clients
  *   contained in the response.
  * @param clients
  *   An array of clients.
  */
case class ClientGetListResponse(
    developer: Option[String] = None,
    start: Option[Int] = None,
    end: Option[Int] = None,
    totalCount: Option[Int] = None,
    clients: Option[Seq[Client]] = None
)

object ClientGetListResponse {

  given jsonCodec: JsonValueCodec[ClientGetListResponse] = JsonCodecMaker.make(codecMakerConfig)

  given encoderClientGetListResponse: Encoder[ClientGetListResponse] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        t.developer.map(v => "developer" -> v.asJson),
        t.start.map(v => "start" -> v.asJson),
        t.end.map(v => "end" -> v.asJson),
        t.totalCount.map(v => "totalCount" -> v.asJson),
        t.clients.map(v => "clients" -> v.asJson)
      ).flatten
    }
  }

  given decoderClientGetListResponse: Decoder[ClientGetListResponse] = Decoder.instance { c =>
    for {
      developer  <- c.downField("developer").as[Option[String]]
      start      <- c.downField("start").as[Option[Int]]
      end        <- c.downField("end").as[Option[Int]]
      totalCount <- c.downField("totalCount").as[Option[Int]]
      clients    <- c.downField("clients").as[Option[Seq[Client]]]
    } yield ClientGetListResponse(
      developer = developer,
      start = start,
      end = end,
      totalCount = totalCount,
      clients = clients
    )
  }

}
