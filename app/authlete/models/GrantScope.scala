/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param scope
  *   Space-delimited scopes.
  * @param resource
  *   List of resource indicators.
  */
case class GrantScope(
    scope: Option[String] = None,
    resource: Option[Seq[String]] = None
)

object GrantScope {

  given jsonCodec: JsonValueCodec[GrantScope] = JsonCodecMaker.make(codecMakerConfig)

  given encoderGrantScope: Encoder[GrantScope] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        t.scope.map(v => "scope" -> v.asJson),
        t.resource.map(v => "resource" -> v.asJson)
      ).flatten
    }
  }

  given decoderGrantScope: Decoder[GrantScope] = Decoder.instance { c =>
    for {
      scope    <- c.downField("scope").as[Option[String]]
      resource <- c.downField("resource").as[Option[Seq[String]]]
    } yield GrantScope(
      scope = scope,
      resource = resource
    )
  }

}
