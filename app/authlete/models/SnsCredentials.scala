/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param sns
  *   SNS.
  * @param apiKey
  *   API key.
  * @param apiSecret
  *   API secret.
  */
case class SnsCredentials(
    sns: Option[String] = None,
    apiKey: Option[String] = None,
    apiSecret: Option[String] = None
)

object SnsCredentials {

  given jsonCodec: JsonValueCodec[SnsCredentials] = JsonCodecMaker.make(codecMakerConfig)

  given encoderSnsCredentials: Encoder[SnsCredentials] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        t.sns.map(v => "sns" -> v.asJson),
        t.apiKey.map(v => "apiKey" -> v.asJson),
        t.apiSecret.map(v => "apiSecret" -> v.asJson)
      ).flatten
    }
  }

  given decoderSnsCredentials: Decoder[SnsCredentials] = Decoder.instance { c =>
    for {
      sns       <- c.downField("sns").as[Option[String]]
      apiKey    <- c.downField("apiKey").as[Option[String]]
      apiSecret <- c.downField("apiSecret").as[Option[String]]
    } yield SnsCredentials(
      sns = sns,
      apiKey = apiKey,
      apiSecret = apiSecret
    )
  }

}
