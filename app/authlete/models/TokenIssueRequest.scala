/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param ticket
  *   The ticket issued from Authlete `/auth/token` API.
  * @param subject
  *   The subject (= unique identifier) of the authenticated user.
  * @param properties
  *   Extra properties to associate with a newly created access token. Note that properties
  *   parameter is accepted only when `Content-Type` of the request is `application/json`, so don't
  *   use `application/x-www-form-urlencoded` if you want to specify properties.
  * @param jwtAtClaims
  *   Additional claims that are added to the payload part of the JWT access token.
  * @param accessToken
  *   The representation of an access token that may be issued as a result of the Authlete API call.
  */
case class TokenIssueRequest(
    ticket: String,
    subject: String,
    properties: Option[Seq[Property]] = None,
    jwtAtClaims: Option[String] = None,
    accessToken: Option[String] = None
)

object TokenIssueRequest {

  given jsonCodec: JsonValueCodec[TokenIssueRequest] = JsonCodecMaker.make(codecMakerConfig)

  given encoderTokenIssueRequest: Encoder[TokenIssueRequest] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        Some("ticket"  -> t.ticket.asJson),
        Some("subject" -> t.subject.asJson),
        t.properties.map(v => "properties" -> v.asJson),
        t.jwtAtClaims.map(v => "jwtAtClaims" -> v.asJson),
        t.accessToken.map(v => "accessToken" -> v.asJson)
      ).flatten
    }
  }

  given decoderTokenIssueRequest: Decoder[TokenIssueRequest] = Decoder.instance { c =>
    for {
      ticket      <- c.downField("ticket").as[String]
      subject     <- c.downField("subject").as[String]
      properties  <- c.downField("properties").as[Option[Seq[Property]]]
      jwtAtClaims <- c.downField("jwtAtClaims").as[Option[String]]
      accessToken <- c.downField("accessToken").as[Option[String]]
    } yield TokenIssueRequest(
      ticket = ticket,
      subject = subject,
      properties = properties,
      jwtAtClaims = jwtAtClaims,
      accessToken = accessToken
    )
  }

}
