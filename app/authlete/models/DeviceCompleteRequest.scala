/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param userCode
  *   A user code.
  * @param result
  * @param subject
  *   The subject (= unique identifier) of the end-user.
  * @param sub
  *   The value of the sub claim that should be used in the ID token.
  * @param authTime
  *   The time at which the end-user was authenticated. Its value is the number of seconds from
  *   `1970-01-01`.
  * @param acr
  *   The reference of the authentication context class which the end-user authentication satisfied.
  * @param claims
  *   Additional claims which will be embedded in the ID token.
  * @param properties
  *   The extra properties associated with the access token.
  * @param scopes
  *   Scopes to replace the scopes specified in the original device authorization request with. When
  *   nothing is specified for this parameter, replacement is not performed.
  * @param errorDescription
  *   The description of the error. If this optional request parameter is given, its value is used
  *   as the value of the `error_description` property, but it is used only when the result is not
  *   `AUTHORIZED`. To comply with the specification strictly, the description must not include
  *   characters outside the set `%x20-21 / %x23-5B / %x5D-7E`.
  * @param errorUri
  *   The URI of a document which describes the error in detail. This corresponds to the `error_uri`
  *   property in the response to the client.
  * @param idtHeaderParams
  *   JSON that represents additional JWS header parameters for ID tokens.
  * @param consentedClaims
  *   the claims that the user has consented for the client application to know.
  * @param jwtAtClaims
  *   Additional claims that are added to the payload part of the JWT access token.
  */
case class DeviceCompleteRequest(
    userCode: String,
    result: BackchannelAuthenticationCompleteRequestResult,
    subject: String,
    sub: Option[String] = None,
    authTime: Option[Long] = None,
    acr: Option[String] = None,
    claims: Option[String] = None,
    properties: Option[Seq[Property]] = None,
    scopes: Option[Seq[String]] = None,
    errorDescription: Option[String] = None,
    errorUri: Option[String] = None,
    idtHeaderParams: Option[String] = None,
    consentedClaims: Option[Seq[String]] = None,
    jwtAtClaims: Option[String] = None
)

object DeviceCompleteRequest {

  given jsonCodec: JsonValueCodec[DeviceCompleteRequest] = JsonCodecMaker.make(codecMakerConfig)

  given encoderDeviceCompleteRequest: Encoder[DeviceCompleteRequest] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        Some("userCode" -> t.userCode.asJson),
        Some("result"   -> t.result.asJson),
        Some("subject"  -> t.subject.asJson),
        t.sub.map(v => "sub" -> v.asJson),
        t.authTime.map(v => "authTime" -> v.asJson),
        t.acr.map(v => "acr" -> v.asJson),
        t.claims.map(v => "claims" -> v.asJson),
        t.properties.map(v => "properties" -> v.asJson),
        t.scopes.map(v => "scopes" -> v.asJson),
        t.errorDescription.map(v => "errorDescription" -> v.asJson),
        t.errorUri.map(v => "errorUri" -> v.asJson),
        t.idtHeaderParams.map(v => "idtHeaderParams" -> v.asJson),
        t.consentedClaims.map(v => "consentedClaims" -> v.asJson),
        t.jwtAtClaims.map(v => "jwtAtClaims" -> v.asJson)
      ).flatten
    }
  }

  given decoderDeviceCompleteRequest: Decoder[DeviceCompleteRequest] = Decoder.instance { c =>
    for {
      userCode         <- c.downField("userCode").as[String]
      result           <- c.downField("result").as[BackchannelAuthenticationCompleteRequestResult]
      subject          <- c.downField("subject").as[String]
      sub              <- c.downField("sub").as[Option[String]]
      authTime         <- c.downField("authTime").as[Option[Long]]
      acr              <- c.downField("acr").as[Option[String]]
      claims           <- c.downField("claims").as[Option[String]]
      properties       <- c.downField("properties").as[Option[Seq[Property]]]
      scopes           <- c.downField("scopes").as[Option[Seq[String]]]
      errorDescription <- c.downField("errorDescription").as[Option[String]]
      errorUri         <- c.downField("errorUri").as[Option[String]]
      idtHeaderParams  <- c.downField("idtHeaderParams").as[Option[String]]
      consentedClaims  <- c.downField("consentedClaims").as[Option[Seq[String]]]
      jwtAtClaims      <- c.downField("jwtAtClaims").as[Option[String]]
    } yield DeviceCompleteRequest(
      userCode = userCode,
      result = result,
      subject = subject,
      sub = sub,
      authTime = authTime,
      acr = acr,
      claims = claims,
      properties = properties,
      scopes = scopes,
      errorDescription = errorDescription,
      errorUri = errorUri,
      idtHeaderParams = idtHeaderParams,
      consentedClaims = consentedClaims,
      jwtAtClaims = jwtAtClaims
    )
  }

}
