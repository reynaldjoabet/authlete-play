/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param resultCode
  *   The code which represents the result of the API call.
  * @param resultMessage
  *   A short message which explains the result of the API call.
  * @param action
  * @param responseContent
  *   The content that the authorization server implementation is to return to the client
  *   application. Its format varies depending on the value of `action` parameter.
  * @param accessToken
  *   The newly issued access token. Note that an access token is issued from an authorization
  *   endpoint only when `response_type` contains token.
  * @param accessTokenExpiresAt
  *   The datetime at which the newly issued access token will expire. The value is represented in
  *   milliseconds since the Unix epoch (1970-01-01).
  * @param accessTokenDuration
  *   The duration of the newly issued access token in seconds.
  * @param idToken
  *   The newly issued ID token. Note that an ID token is issued from an authorization endpoint only
  *   when `response_type` contains `id_token`.
  * @param authorizationCode
  *   The newly issued authorization code. Note that an authorization code is issued only when
  *   `response_type` contains code.
  * @param jwtAccessToken
  *   The newly issued access token in JWT format. If the service is not configured to issue
  *   JWT-based access tokens, this property is always set to `null`.
  */
case class AuthorizationIssueResponse(
    resultCode: Option[String] = None,
    resultMessage: Option[String] = None,
    action: Option[AuthorizationFailResponseAction] = None,
    responseContent: Option[String] = None,
    accessToken: Option[String] = None,
    accessTokenExpiresAt: Option[Long] = None,
    accessTokenDuration: Option[Long] = None,
    idToken: Option[String] = None,
    authorizationCode: Option[String] = None,
    jwtAccessToken: Option[String] = None
)

object AuthorizationIssueResponse {

  given jsonCodec: JsonValueCodec[AuthorizationIssueResponse] =
    JsonCodecMaker.make(codecMakerConfig)

  given encoderAuthorizationIssueResponse: Encoder[AuthorizationIssueResponse] =
    Encoder.instance { t =>
      Json.fromFields {
        Seq(
          t.resultCode.map(v => "resultCode" -> v.asJson),
          t.resultMessage.map(v => "resultMessage" -> v.asJson),
          t.action.map(v => "action" -> v.asJson),
          t.responseContent.map(v => "responseContent" -> v.asJson),
          t.accessToken.map(v => "accessToken" -> v.asJson),
          t.accessTokenExpiresAt.map(v => "accessTokenExpiresAt" -> v.asJson),
          t.accessTokenDuration.map(v => "accessTokenDuration" -> v.asJson),
          t.idToken.map(v => "idToken" -> v.asJson),
          t.authorizationCode.map(v => "authorizationCode" -> v.asJson),
          t.jwtAccessToken.map(v => "jwtAccessToken" -> v.asJson)
        ).flatten
      }
    }

  given decoderAuthorizationIssueResponse: Decoder[AuthorizationIssueResponse] =
    Decoder.instance { c =>
      for {
        resultCode    <- c.downField("resultCode").as[Option[String]]
        resultMessage <- c.downField("resultMessage").as[Option[String]]
        action <-
          mapEmptyStringToNull(c.downField("action")).as[Option[AuthorizationFailResponseAction]]
        responseContent      <- c.downField("responseContent").as[Option[String]]
        accessToken          <- c.downField("accessToken").as[Option[String]]
        accessTokenExpiresAt <- c.downField("accessTokenExpiresAt").as[Option[Long]]
        accessTokenDuration  <- c.downField("accessTokenDuration").as[Option[Long]]
        idToken              <- c.downField("idToken").as[Option[String]]
        authorizationCode    <- c.downField("authorizationCode").as[Option[String]]
        jwtAccessToken       <- c.downField("jwtAccessToken").as[Option[String]]
      } yield AuthorizationIssueResponse(
        resultCode = resultCode,
        resultMessage = resultMessage,
        action = action,
        responseContent = responseContent,
        accessToken = accessToken,
        accessTokenExpiresAt = accessTokenExpiresAt,
        accessTokenDuration = accessTokenDuration,
        idToken = idToken,
        authorizationCode = authorizationCode,
        jwtAccessToken = jwtAccessToken
      )
    }

}
