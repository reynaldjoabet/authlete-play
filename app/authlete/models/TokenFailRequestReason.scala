/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * The reason of the failure of the token request.
  */
enum TokenFailRequestReason(val value: String) derives ConfiguredJsonValueCodec {

  case UNKNOWN extends TokenFailRequestReason("UNKNOWN")

  case INVALIDRESOURCEOWNERCREDENTIALS
      extends TokenFailRequestReason("INVALID_RESOURCE_OWNER_CREDENTIALS")

  case INVALIDTARGET extends TokenFailRequestReason("INVALID_TARGET")

}

object TokenFailRequestReason {

  def withValueOpt(value: String): Option[TokenFailRequestReason] = TokenFailRequestReason
    .values
    .find(_.value == value)

  def withValue(value: String): TokenFailRequestReason =
    withValueOpt(value).getOrElse(
      throw java
        .lang
        .IllegalArgumentException(s"TokenFailRequestReason enum case not found: $value")
    )

  given decoderTokenFailRequestReason: Decoder[TokenFailRequestReason] = Decoder
    .decodeString
    .map(withValue)

  given encoderTokenFailRequestReason: Encoder[TokenFailRequestReason] = Encoder
    .encodeString
    .contramap[TokenFailRequestReason](_.value)

}
