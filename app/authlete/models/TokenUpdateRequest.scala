/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param accessToken
  *   An access token.
  * @param accessTokenExpiresAt
  *   A new date at which the access token will expire in milliseconds since the Unix epoch
  *   (1970-01-01). If the `accessTokenExpiresAt` request parameter is not included in a request or
  *   its value is 0 (or negative), the expiration date of the access token is not changed.
  * @param scopes
  *   A new set of scopes assigned to the access token. Scopes that are not supported by the service
  *   and those that the client application associated with the access token is not allowed to
  *   request are ignored on the server side. If the `scopes` request parameter is not included in a
  *   request or its value is `null`, the scopes of the access token are not changed. Note that
  *   `properties` parameter is accepted only when `Content-Type` of the request is
  *   `application/json`, so don't use `application/x-www-form-urlencoded` if you want to specify
  *   `properties`.
  * @param properties
  *   A new set of properties assigned to the access token. If the `properties` request parameter is
  *   not included in a request or its value is null, the properties of the access token are not
  *   changed.
  * @param accessTokenExpiresAtUpdatedOnScopeUpdate
  *   A boolean request parameter which indicates whether the API attempts to update the expiration
  *   date of the access token when the scopes linked to the access token are changed by this
  *   request.
  * @param accessTokenHash
  *   The hash of the access token value. Used when the hash of the token is known (perhaps from
  *   lookup) but the value of the token itself is not. The value of the `accessToken` parameter
  *   takes precedence.
  * @param accessTokenValueUpdated
  *   A boolean request parameter which indicates whether to update the value of the access token in
  *   the data store. If this parameter is set to `true` then a new access token value is generated
  *   by the server and returned in the response.
  * @param accessTokenPersistent
  *   The flag which indicates whether the access token expires or not. By default, all access
  *   tokens expire after a period of time determined by their service. If this request parameter is
  *   `true` then the access token will not automatically expire and must be revoked or deleted
  *   manually at the service. If this request parameter is `true`, the `accessTokenExpiresAt`
  *   request parameter is ignored. If this request parameter is `false`, the `accessTokenExpiresAt`
  *   request parameter is processed normally.
  * @param certificateThumbprint
  *   The thumbprint of the MTLS certificate bound to this token. If this property is set, a
  *   certificate with the corresponding value MUST be presented with the access token when it is
  *   used by a client. The value of this property must be a SHA256 certificate thumbprint,
  *   base64url encoded.
  * @param dpopKeyThumbprint
  *   The thumbprint of the public key used for DPoP presentation of this token. If this property is
  *   set, a DPoP proof signed with the corresponding private key MUST be presented with the access
  *   token when it is used by a client. Additionally, the token's `token_type` will be set to
  *   'DPoP'.
  * @param authorizationDetails
  * @param forExternalAttachment
  *   the flag which indicates whether the access token is for an external attachment.
  */
case class TokenUpdateRequest(
    accessToken: String,
    accessTokenExpiresAt: Option[Long] = None,
    scopes: Option[Seq[String]] = None,
    properties: Option[Seq[Property]] = None,
    accessTokenExpiresAtUpdatedOnScopeUpdate: Option[Boolean] = None,
    accessTokenHash: Option[String] = None,
    accessTokenValueUpdated: Option[Boolean] = None,
    accessTokenPersistent: Option[Boolean] = None,
    certificateThumbprint: Option[String] = None,
    dpopKeyThumbprint: Option[String] = None,
    authorizationDetails: Option[AuthzDetails] = None,
    forExternalAttachment: Option[Boolean] = None
)

object TokenUpdateRequest {

  given jsonCodec: JsonValueCodec[TokenUpdateRequest] = JsonCodecMaker.make(codecMakerConfig)

  given encoderTokenUpdateRequest: Encoder[TokenUpdateRequest] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        Some("accessToken" -> t.accessToken.asJson),
        t.accessTokenExpiresAt.map(v => "accessTokenExpiresAt" -> v.asJson),
        t.scopes.map(v => "scopes" -> v.asJson),
        t.properties.map(v => "properties" -> v.asJson),
        t.accessTokenExpiresAtUpdatedOnScopeUpdate
          .map(v => "accessTokenExpiresAtUpdatedOnScopeUpdate" -> v.asJson),
        t.accessTokenHash.map(v => "accessTokenHash" -> v.asJson),
        t.accessTokenValueUpdated.map(v => "accessTokenValueUpdated" -> v.asJson),
        t.accessTokenPersistent.map(v => "accessTokenPersistent" -> v.asJson),
        t.certificateThumbprint.map(v => "certificateThumbprint" -> v.asJson),
        t.dpopKeyThumbprint.map(v => "dpopKeyThumbprint" -> v.asJson),
        t.authorizationDetails.map(v => "authorizationDetails" -> v.asJson),
        t.forExternalAttachment.map(v => "forExternalAttachment" -> v.asJson)
      ).flatten
    }
  }

  given decoderTokenUpdateRequest: Decoder[TokenUpdateRequest] = Decoder.instance { c =>
    for {
      accessToken          <- c.downField("accessToken").as[String]
      accessTokenExpiresAt <- c.downField("accessTokenExpiresAt").as[Option[Long]]
      scopes               <- c.downField("scopes").as[Option[Seq[String]]]
      properties           <- c.downField("properties").as[Option[Seq[Property]]]
      accessTokenExpiresAtUpdatedOnScopeUpdate <-
        c.downField("accessTokenExpiresAtUpdatedOnScopeUpdate").as[Option[Boolean]]
      accessTokenHash         <- c.downField("accessTokenHash").as[Option[String]]
      accessTokenValueUpdated <- c.downField("accessTokenValueUpdated").as[Option[Boolean]]
      accessTokenPersistent   <- c.downField("accessTokenPersistent").as[Option[Boolean]]
      certificateThumbprint   <- c.downField("certificateThumbprint").as[Option[String]]
      dpopKeyThumbprint       <- c.downField("dpopKeyThumbprint").as[Option[String]]
      authorizationDetails    <- c.downField("authorizationDetails").as[Option[AuthzDetails]]
      forExternalAttachment   <- c.downField("forExternalAttachment").as[Option[Boolean]]
    } yield TokenUpdateRequest(
      accessToken = accessToken,
      accessTokenExpiresAt = accessTokenExpiresAt,
      scopes = scopes,
      properties = properties,
      accessTokenExpiresAtUpdatedOnScopeUpdate = accessTokenExpiresAtUpdatedOnScopeUpdate,
      accessTokenHash = accessTokenHash,
      accessTokenValueUpdated = accessTokenValueUpdated,
      accessTokenPersistent = accessTokenPersistent,
      certificateThumbprint = certificateThumbprint,
      dpopKeyThumbprint = dpopKeyThumbprint,
      authorizationDetails = authorizationDetails,
      forExternalAttachment = forExternalAttachment
    )
  }

}
