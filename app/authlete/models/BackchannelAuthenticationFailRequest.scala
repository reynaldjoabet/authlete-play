/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param ticket
  *   The ticket which should be deleted on a call of Authlete's `/backchannel/authentication/fail`
  *   API. This request parameter is not mandatory but optional. If this request parameter is given
  *   and the ticket belongs to the service, the specified ticket is deleted from the database.
  *   Giving this parameter is recommended to clean up the storage area for the service.
  * @param reason
  * @param errorDescription
  *   The description of the error. This corresponds to the `error_description` property in the
  *   response to the client.
  * @param errorUri
  *   The URI of a document which describes the error in detail. If this optional request parameter
  *   is given, its value is used as the value of the `error_uri` property.
  */
case class BackchannelAuthenticationFailRequest(
    ticket: String,
    reason: BackchannelAuthenticationFailRequestReason,
    errorDescription: Option[String] = None,
    errorUri: Option[String] = None
)

object BackchannelAuthenticationFailRequest {

  given jsonCodec: JsonValueCodec[BackchannelAuthenticationFailRequest] =
    JsonCodecMaker.make(codecMakerConfig)

  given encoderBackchannelAuthenticationFailRequest: Encoder[BackchannelAuthenticationFailRequest] =
    Encoder.instance { t =>
      Json.fromFields {
        Seq(
          Some("ticket" -> t.ticket.asJson),
          Some("reason" -> t.reason.asJson),
          t.errorDescription.map(v => "errorDescription" -> v.asJson),
          t.errorUri.map(v => "errorUri" -> v.asJson)
        ).flatten
      }
    }

  given decoderBackchannelAuthenticationFailRequest: Decoder[BackchannelAuthenticationFailRequest] =
    Decoder.instance { c =>
      for {
        ticket           <- c.downField("ticket").as[String]
        reason           <- c.downField("reason").as[BackchannelAuthenticationFailRequestReason]
        errorDescription <- c.downField("errorDescription").as[Option[String]]
        errorUri         <- c.downField("errorUri").as[Option[String]]
      } yield BackchannelAuthenticationFailRequest(
        ticket = ticket,
        reason = reason,
        errorDescription = errorDescription,
        errorUri = errorUri
      )
    }

}
