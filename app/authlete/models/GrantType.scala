/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * The grant type of the access token when the access token was created.
  */
enum GrantType(val value: String) derives ConfiguredJsonValueCodec {

  case AUTHORIZATIONCODE extends GrantType("AUTHORIZATION_CODE")
  case `IMPLICIT`        extends GrantType("IMPLICIT")
  case PASSWORD          extends GrantType("PASSWORD")
  case CLIENTCREDENTIALS extends GrantType("CLIENT_CREDENTIALS")
  case REFRESHTOKEN      extends GrantType("REFRESH_TOKEN")
  case CIBA              extends GrantType("CIBA")
  case DEVICECODE        extends GrantType("DEVICE_CODE")
  case TOKENEXCHANGE     extends GrantType("TOKEN_EXCHANGE")
  case JWTBEARER         extends GrantType("JWT_BEARER")

}

object GrantType {

  def withValueOpt(value: String): Option[GrantType] = GrantType.values.find(_.value == value)

  def withValue(value: String): GrantType =
    withValueOpt(value).getOrElse(
      throw java.lang.IllegalArgumentException(s"GrantType enum case not found: $value")
    )

  given decoderGrantType: Decoder[GrantType] = Decoder.decodeString.map(withValue)
  given encoderGrantType: Encoder[GrantType] = Encoder.encodeString.contramap[GrantType](_.value)

}
