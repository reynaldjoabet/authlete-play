/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param name
  *   The name of the scope.
  * @param defaultEntry
  *   `true` to mark the scope as default. Scopes marked as default are regarded as requested when
  *   an authorization request from a client application does not contain scope request parameter.
  * @param description
  *   The description about the scope.
  * @param descriptions
  *   The descriptions about this scope in multiple languages.
  * @param attributes
  *   The attributes of the scope.
  */
case class Scope(
    name: Option[String] = None,
    defaultEntry: Option[Boolean] = None,
    description: Option[String] = None,
    descriptions: Option[Seq[TaggedValue]] = None,
    attributes: Option[Seq[Pair]] = None
)

object Scope {

  given jsonCodec: JsonValueCodec[Scope] = JsonCodecMaker.make(codecMakerConfig)

  given encoderScope: Encoder[Scope] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        t.name.map(v => "name" -> v.asJson),
        t.defaultEntry.map(v => "defaultEntry" -> v.asJson),
        t.description.map(v => "description" -> v.asJson),
        t.descriptions.map(v => "descriptions" -> v.asJson),
        t.attributes.map(v => "attributes" -> v.asJson)
      ).flatten
    }
  }

  given decoderScope: Decoder[Scope] = Decoder.instance { c =>
    for {
      name         <- c.downField("name").as[Option[String]]
      defaultEntry <- c.downField("defaultEntry").as[Option[Boolean]]
      description  <- c.downField("description").as[Option[String]]
      descriptions <- c.downField("descriptions").as[Option[Seq[TaggedValue]]]
      attributes   <- c.downField("attributes").as[Option[Seq[Pair]]]
    } yield Scope(
      name = name,
      defaultEntry = defaultEntry,
      description = description,
      descriptions = descriptions,
      attributes = attributes
    )
  }

}
