/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param scopes
  * @param claims
  *   The claims associated with the Grant.
  * @param authorizationDetails
  */
case class Grant(
    scopes: Option[Seq[GrantScope]] = None,
    claims: Option[Seq[String]] = None,
    authorizationDetails: Option[AuthzDetails] = None
)

object Grant {

  given jsonCodec: JsonValueCodec[Grant] = JsonCodecMaker.make(codecMakerConfig)

  given encoderGrant: Encoder[Grant] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        t.scopes.map(v => "scopes" -> v.asJson),
        t.claims.map(v => "claims" -> v.asJson),
        t.authorizationDetails.map(v => "authorizationDetails" -> v.asJson)
      ).flatten
    }
  }

  given decoderGrant: Decoder[Grant] = Decoder.instance { c =>
    for {
      scopes               <- c.downField("scopes").as[Option[Seq[GrantScope]]]
      claims               <- c.downField("claims").as[Option[Seq[String]]]
      authorizationDetails <- c.downField("authorizationDetails").as[Option[AuthzDetails]]
    } yield Grant(
      scopes = scopes,
      claims = claims,
      authorizationDetails = authorizationDetails
    )
  }

}
