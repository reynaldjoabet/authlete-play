/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * The grant type of the access token when the access token was created.
  */
enum TokenType(val value: String) derives ConfiguredJsonValueCodec {

  case UrnIetfParamsOauthTokenTypeJwt extends TokenType("urn:ietf:params:oauth:token-type:jwt")

  case UrnIetfParamsOauthTokenTypeAccessToken
      extends TokenType("urn:ietf:params:oauth:token-type:access_token")

  case UrnIetfParamsOauthTokenTypeRefreshToken
      extends TokenType("urn:ietf:params:oauth:token-type:refresh_token")

  case UrnIetfParamsOauthTokenTypeIdToken
      extends TokenType("urn:ietf:params:oauth:token-type:id_token")

  case UrnIetfParamsOauthTokenTypeSaml1 extends TokenType("urn:ietf:params:oauth:token-type:saml1")
  case UrnIetfParamsOauthTokenTypeSaml2 extends TokenType("urn:ietf:params:oauth:token-type:saml2")
  case DEVICECODE                       extends TokenType("DEVICE_CODE")
  case TOKENEXCHANGE                    extends TokenType("TOKEN_EXCHANGE")
  case JWTBEARER                        extends TokenType("JWT_BEARER")

}

object TokenType {

  def withValueOpt(value: String): Option[TokenType] = TokenType.values.find(_.value == value)

  def withValue(value: String): TokenType =
    withValueOpt(value).getOrElse(
      throw java.lang.IllegalArgumentException(s"TokenType enum case not found: $value")
    )

  given decoderTokenType: Decoder[TokenType] = Decoder.decodeString.map(withValue)
  given encoderTokenType: Encoder[TokenType] = Encoder.encodeString.contramap[TokenType](_.value)

}
