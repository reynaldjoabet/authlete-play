/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param version
  *   The server version.
  * @param features
  *   the features that the server supports.
  */
case class InfoResponse(
    version: String,
    features: Seq[String]
)

object InfoResponse {

  given jsonCodec: JsonValueCodec[InfoResponse] = JsonCodecMaker.make(codecMakerConfig)

  given encoderInfoResponse: Encoder[InfoResponse] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        Some("version"  -> t.version.asJson),
        Some("features" -> t.features.asJson)
      ).flatten
    }
  }

  given decoderInfoResponse: Decoder[InfoResponse] = Decoder.instance { c =>
    for {
      version  <- c.downField("version").as[String]
      features <- c.downField("features").as[Seq[String]]
    } yield InfoResponse(
      version = version,
      features = features
    )
  }

}
