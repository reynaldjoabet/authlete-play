/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param resultCode
  *   The code which represents the result of the API call.
  * @param resultMessage
  *   A short message which explains the result of the API call.
  * @param action
  * @param responseContent
  *   The content that the authorization server implementation is to return to the client
  *   application. Its format varies depending on the value of `action` parameter.
  * @param clientId
  *   The client ID of the client application that has made the backchannel authentication request.
  * @param clientIdAlias
  *   The client ID alias of the client application that has made the backchannel authentication
  *   request.
  * @param clientIdAliasUsed
  *   `true` if the value of the client_id request parameter included in the backchannel
  *   authentication request is the client ID alias. `false` if the value is the original numeric
  *   client ID.
  * @param clientName
  *   The name of the client application which has made the backchannel authentication request.
  * @param deliveryMode
  * @param clientNotificationEndpoint
  *   The client notification endpoint to which a notification needs to be sent. This corresponds to
  *   the `client_notification_endpoint` metadata of the client application.
  * @param clientNotificationToken
  *   The client notification token which needs to be embedded as a Bearer token in the
  *   Authorization header in the notification. This is the value of the `client_notification_token`
  *   request parameter included in the backchannel authentication request.
  * @param authReqId
  *   The newly issued authentication request ID.
  * @param accessToken
  *   The issued access token.
  * @param refreshToken
  *   The issued refresh token.
  * @param idToken
  *   The issued ID token.
  * @param accessTokenDuration
  *   The duration of the access token in seconds.
  * @param refreshTokenDuration
  *   The duration of the refresh token in seconds.
  * @param idTokenDuration
  *   The duration of the ID token in seconds.
  * @param jwtAccessToken
  *   The issued access token in JWT format.
  * @param resources
  *   The resources specified by the `resource` request parameters or by the `resource` property in
  *   the request object. If both are given, the values in the request object should be set. See
  *   \"Resource Indicators for OAuth 2.0\" for details.
  * @param authorizationDetails
  * @param serviceAttributes
  *   The attributes of this service that the client application belongs to.
  * @param clientAttributes
  *   The attributes of the client.
  * @param grantId
  *   the value of the `grant_id` request parameter of the device authorization request. The
  *   `grant_id` request parameter is defined in [Grant Management for OAuth
  *   2.0](https://openid.net/specs/fapi-grant-management.html) , which is supported by Authlete 2.3
  *   and newer versions.
  * @param clientEntityId
  *   The entity ID of the client.
  * @param clientEntityIdUsed
  *   Flag which indicates whether the entity ID of the client was used when the request for the
  *   access token was made.
  */
case class BackchannelAuthenticationCompleteResponse(
    resultCode: Option[String] = None,
    resultMessage: Option[String] = None,
    action: Option[BackchannelAuthenticationCompleteResponseAction] = None,
    responseContent: Option[String] = None,
    clientId: Option[Long] = None,
    clientIdAlias: Option[String] = None,
    clientIdAliasUsed: Option[Boolean] = None,
    clientName: Option[String] = None,
    deliveryMode: Option[DeliveryMode] = None,
    clientNotificationEndpoint: Option[String] = None,
    clientNotificationToken: Option[String] = None,
    authReqId: Option[String] = None,
    accessToken: Option[String] = None,
    refreshToken: Option[String] = None,
    idToken: Option[String] = None,
    accessTokenDuration: Option[Long] = None,
    refreshTokenDuration: Option[Long] = None,
    idTokenDuration: Option[Long] = None,
    jwtAccessToken: Option[String] = None,
    resources: Option[Seq[String]] = None,
    authorizationDetails: Option[AuthzDetails] = None,
    serviceAttributes: Option[Seq[Pair]] = None,
    clientAttributes: Option[Seq[Pair]] = None,
    grantId: Option[String] = None,
    clientEntityId: Option[String] = None,
    clientEntityIdUsed: Option[Boolean] = None
)

object BackchannelAuthenticationCompleteResponse {

  given jsonCodec: JsonValueCodec[BackchannelAuthenticationCompleteResponse] =
    JsonCodecMaker.make(codecMakerConfig)

  given encoderBackchannelAuthenticationCompleteResponse
      : Encoder[BackchannelAuthenticationCompleteResponse] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        t.resultCode.map(v => "resultCode" -> v.asJson),
        t.resultMessage.map(v => "resultMessage" -> v.asJson),
        t.action.map(v => "action" -> v.asJson),
        t.responseContent.map(v => "responseContent" -> v.asJson),
        t.clientId.map(v => "clientId" -> v.asJson),
        t.clientIdAlias.map(v => "clientIdAlias" -> v.asJson),
        t.clientIdAliasUsed.map(v => "clientIdAliasUsed" -> v.asJson),
        t.clientName.map(v => "clientName" -> v.asJson),
        t.deliveryMode.map(v => "deliveryMode" -> v.asJson),
        t.clientNotificationEndpoint.map(v => "clientNotificationEndpoint" -> v.asJson),
        t.clientNotificationToken.map(v => "clientNotificationToken" -> v.asJson),
        t.authReqId.map(v => "authReqId" -> v.asJson),
        t.accessToken.map(v => "accessToken" -> v.asJson),
        t.refreshToken.map(v => "refreshToken" -> v.asJson),
        t.idToken.map(v => "idToken" -> v.asJson),
        t.accessTokenDuration.map(v => "accessTokenDuration" -> v.asJson),
        t.refreshTokenDuration.map(v => "refreshTokenDuration" -> v.asJson),
        t.idTokenDuration.map(v => "idTokenDuration" -> v.asJson),
        t.jwtAccessToken.map(v => "jwtAccessToken" -> v.asJson),
        t.resources.map(v => "resources" -> v.asJson),
        t.authorizationDetails.map(v => "authorizationDetails" -> v.asJson),
        t.serviceAttributes.map(v => "serviceAttributes" -> v.asJson),
        t.clientAttributes.map(v => "clientAttributes" -> v.asJson),
        t.grantId.map(v => "grantId" -> v.asJson),
        t.clientEntityId.map(v => "clientEntityId" -> v.asJson),
        t.clientEntityIdUsed.map(v => "clientEntityIdUsed" -> v.asJson)
      ).flatten
    }
  }

  given decoderBackchannelAuthenticationCompleteResponse
      : Decoder[BackchannelAuthenticationCompleteResponse] = Decoder.instance { c =>
    for {
      resultCode    <- c.downField("resultCode").as[Option[String]]
      resultMessage <- c.downField("resultMessage").as[Option[String]]
      action <- mapEmptyStringToNull(c.downField("action")).as[Option[
                  BackchannelAuthenticationCompleteResponseAction
                ]]
      responseContent            <- c.downField("responseContent").as[Option[String]]
      clientId                   <- c.downField("clientId").as[Option[Long]]
      clientIdAlias              <- c.downField("clientIdAlias").as[Option[String]]
      clientIdAliasUsed          <- c.downField("clientIdAliasUsed").as[Option[Boolean]]
      clientName                 <- c.downField("clientName").as[Option[String]]
      deliveryMode               <- mapEmptyStringToNull(c.downField("deliveryMode")).as[Option[DeliveryMode]]
      clientNotificationEndpoint <- c.downField("clientNotificationEndpoint").as[Option[String]]
      clientNotificationToken    <- c.downField("clientNotificationToken").as[Option[String]]
      authReqId                  <- c.downField("authReqId").as[Option[String]]
      accessToken                <- c.downField("accessToken").as[Option[String]]
      refreshToken               <- c.downField("refreshToken").as[Option[String]]
      idToken                    <- c.downField("idToken").as[Option[String]]
      accessTokenDuration        <- c.downField("accessTokenDuration").as[Option[Long]]
      refreshTokenDuration       <- c.downField("refreshTokenDuration").as[Option[Long]]
      idTokenDuration            <- c.downField("idTokenDuration").as[Option[Long]]
      jwtAccessToken             <- c.downField("jwtAccessToken").as[Option[String]]
      resources                  <- c.downField("resources").as[Option[Seq[String]]]
      authorizationDetails       <- c.downField("authorizationDetails").as[Option[AuthzDetails]]
      serviceAttributes          <- c.downField("serviceAttributes").as[Option[Seq[Pair]]]
      clientAttributes           <- c.downField("clientAttributes").as[Option[Seq[Pair]]]
      grantId                    <- c.downField("grantId").as[Option[String]]
      clientEntityId             <- c.downField("clientEntityId").as[Option[String]]
      clientEntityIdUsed         <- c.downField("clientEntityIdUsed").as[Option[Boolean]]
    } yield BackchannelAuthenticationCompleteResponse(
      resultCode = resultCode,
      resultMessage = resultMessage,
      action = action,
      responseContent = responseContent,
      clientId = clientId,
      clientIdAlias = clientIdAlias,
      clientIdAliasUsed = clientIdAliasUsed,
      clientName = clientName,
      deliveryMode = deliveryMode,
      clientNotificationEndpoint = clientNotificationEndpoint,
      clientNotificationToken = clientNotificationToken,
      authReqId = authReqId,
      accessToken = accessToken,
      refreshToken = refreshToken,
      idToken = idToken,
      accessTokenDuration = accessTokenDuration,
      refreshTokenDuration = refreshTokenDuration,
      idTokenDuration = idTokenDuration,
      jwtAccessToken = jwtAccessToken,
      resources = resources,
      authorizationDetails = authorizationDetails,
      serviceAttributes = serviceAttributes,
      clientAttributes = clientAttributes,
      grantId = grantId,
      clientEntityId = clientEntityId,
      clientEntityIdUsed = clientEntityIdUsed
    )
  }

}
