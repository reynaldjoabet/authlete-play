/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param resultCode
  *   The code which represents the result of the API call.
  * @param resultMessage
  *   A short message which explains the result of the API call.
  * @param action
  * @param requestUri
  *   The request_uri created to the client to be used as request_uri on the authorize call.
  * @param responseContent
  *   The content that the authorization server implementation is to return to the client
  *   application.
  */
case class PushedAuthorizationResponse(
    resultCode: Option[String] = None,
    resultMessage: Option[String] = None,
    action: Option[PushedAuthorizationResponseAction] = None,
    requestUri: Option[String] = None,
    responseContent: Option[String] = None
)

object PushedAuthorizationResponse {

  given jsonCodec: JsonValueCodec[PushedAuthorizationResponse] =
    JsonCodecMaker.make(codecMakerConfig)

  given encoderPushedAuthorizationResponse: Encoder[PushedAuthorizationResponse] =
    Encoder.instance { t =>
      Json.fromFields {
        Seq(
          t.resultCode.map(v => "resultCode" -> v.asJson),
          t.resultMessage.map(v => "resultMessage" -> v.asJson),
          t.action.map(v => "action" -> v.asJson),
          t.requestUri.map(v => "requestUri" -> v.asJson),
          t.responseContent.map(v => "responseContent" -> v.asJson)
        ).flatten
      }
    }

  given decoderPushedAuthorizationResponse: Decoder[PushedAuthorizationResponse] =
    Decoder.instance { c =>
      for {
        resultCode    <- c.downField("resultCode").as[Option[String]]
        resultMessage <- c.downField("resultMessage").as[Option[String]]
        action <-
          mapEmptyStringToNull(c.downField("action")).as[Option[PushedAuthorizationResponseAction]]
        requestUri      <- c.downField("requestUri").as[Option[String]]
        responseContent <- c.downField("responseContent").as[Option[String]]
      } yield PushedAuthorizationResponse(
        resultCode = resultCode,
        resultMessage = resultMessage,
        action = action,
        requestUri = requestUri,
        responseContent = responseContent
      )
    }

}
