/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param clientId
  *   The client id.
  * @param clientIdAlias
  *   The alias of the client.
  * @param clientIdAliasUsed
  *   Flag specifying if the alias was used to identify the client
  * @param subject
  *   the resource owner unique id
  * @param scopes
  *   The scopes granted on the token
  * @param expiresAt
  *   time which the token expires.
  * @param properties
  *   Extra properties associated with the token
  * @param resources
  *   The array of the resources of the token.
  * @param authorizationDetails
  * @param clientEntityId
  *   The entity ID of the client.
  * @param clientEntityIdUsed
  *   Flag which indicates whether the entity ID of the client was used when the request for the
  *   access token was made.
  */
case class TokenInfo(
    clientId: Option[Int] = None,
    clientIdAlias: Option[String] = None,
    clientIdAliasUsed: Option[Boolean] = None,
    subject: Option[String] = None,
    scopes: Option[Seq[String]] = None,
    expiresAt: Option[Int] = None,
    properties: Option[Seq[Property]] = None,
    resources: Option[Seq[String]] = None,
    authorizationDetails: Option[AuthorizationDetailsElement] = None,
    clientEntityId: Option[String] = None,
    clientEntityIdUsed: Option[Boolean] = None
)

object TokenInfo {

  given jsonCodec: JsonValueCodec[TokenInfo] = JsonCodecMaker.make(codecMakerConfig)

  given encoderTokenInfo: Encoder[TokenInfo] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        t.clientId.map(v => "clientId" -> v.asJson),
        t.clientIdAlias.map(v => "clientIdAlias" -> v.asJson),
        t.clientIdAliasUsed.map(v => "clientIdAliasUsed" -> v.asJson),
        t.subject.map(v => "subject" -> v.asJson),
        t.scopes.map(v => "scopes" -> v.asJson),
        t.expiresAt.map(v => "expiresAt" -> v.asJson),
        t.properties.map(v => "properties" -> v.asJson),
        t.resources.map(v => "resources" -> v.asJson),
        t.authorizationDetails.map(v => "authorizationDetails" -> v.asJson),
        t.clientEntityId.map(v => "clientEntityId" -> v.asJson),
        t.clientEntityIdUsed.map(v => "clientEntityIdUsed" -> v.asJson)
      ).flatten
    }
  }

  given decoderTokenInfo: Decoder[TokenInfo] = Decoder.instance { c =>
    for {
      clientId          <- c.downField("clientId").as[Option[Int]]
      clientIdAlias     <- c.downField("clientIdAlias").as[Option[String]]
      clientIdAliasUsed <- c.downField("clientIdAliasUsed").as[Option[Boolean]]
      subject           <- c.downField("subject").as[Option[String]]
      scopes            <- c.downField("scopes").as[Option[Seq[String]]]
      expiresAt         <- c.downField("expiresAt").as[Option[Int]]
      properties        <- c.downField("properties").as[Option[Seq[Property]]]
      resources         <- c.downField("resources").as[Option[Seq[String]]]
      authorizationDetails <-
        c.downField("authorizationDetails").as[Option[AuthorizationDetailsElement]]
      clientEntityId     <- c.downField("clientEntityId").as[Option[String]]
      clientEntityIdUsed <- c.downField("clientEntityIdUsed").as[Option[Boolean]]
    } yield TokenInfo(
      clientId = clientId,
      clientIdAlias = clientIdAlias,
      clientIdAliasUsed = clientIdAliasUsed,
      subject = subject,
      scopes = scopes,
      expiresAt = expiresAt,
      properties = properties,
      resources = resources,
      authorizationDetails = authorizationDetails,
      clientEntityId = clientEntityId,
      clientEntityIdUsed = clientEntityIdUsed
    )
  }

}
