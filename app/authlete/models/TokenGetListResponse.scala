/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param start
  *   Start index of search results (inclusive).
  * @param end
  *   End index of search results (exclusive).
  * @param totalCount
  *   Unique ID of a client developer.
  * @param client
  * @param subject
  *   Unique user ID of an end-user.
  * @param accessTokens
  *   An array of access tokens.
  */
case class TokenGetListResponse(
    start: Option[Int] = None,
    end: Option[Int] = None,
    totalCount: Option[Int] = None,
    client: Option[Client] = None,
    subject: Option[String] = None,
    accessTokens: Option[Seq[AccessToken]] = None
)

object TokenGetListResponse {

  given jsonCodec: JsonValueCodec[TokenGetListResponse] = JsonCodecMaker.make(codecMakerConfig)

  given encoderTokenGetListResponse: Encoder[TokenGetListResponse] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        t.start.map(v => "start" -> v.asJson),
        t.end.map(v => "end" -> v.asJson),
        t.totalCount.map(v => "totalCount" -> v.asJson),
        t.client.map(v => "client" -> v.asJson),
        t.subject.map(v => "subject" -> v.asJson),
        t.accessTokens.map(v => "accessTokens" -> v.asJson)
      ).flatten
    }
  }

  given decoderTokenGetListResponse: Decoder[TokenGetListResponse] = Decoder.instance { c =>
    for {
      start        <- c.downField("start").as[Option[Int]]
      end          <- c.downField("end").as[Option[Int]]
      totalCount   <- c.downField("totalCount").as[Option[Int]]
      client       <- c.downField("client").as[Option[Client]]
      subject      <- c.downField("subject").as[Option[String]]
      accessTokens <- c.downField("accessTokens").as[Option[Seq[AccessToken]]]
    } yield TokenGetListResponse(
      start = start,
      end = end,
      totalCount = totalCount,
      client = client,
      subject = subject,
      accessTokens = accessTokens
    )
  }

}
