/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param resultCode
  *   The code which represents the result of the API call.
  * @param resultMessage
  *   A short message which explains the result of the API call.
  * @param action
  * @param accessToken
  *   The newly issued access token.
  * @param clientId
  *   The ID of the client application associated with the access token.
  * @param expiresAt
  *   The time at which the access token expires.
  * @param expiresIn
  *   The duration of the newly issued access token in seconds.
  * @param grantType
  *   The grant type for the newly issued access token.
  * @param properties
  *   The extra properties associated with the access token.
  * @param refreshToken
  *   The newly issued refresh token.
  * @param scopes
  *   Scopes which are associated with the access token.
  * @param subject
  *   The subject (= unique identifier) of the user associated with the newly issued access token.
  * @param tokenType
  *   The token type of the access token.
  * @param jwtAccessToken
  *   If the authorization server is configured to issue JWT-based access tokens (= if
  *   `Service.accessTokenSignAlg` is set to a `non-null` value), a JWT-based access token is issued
  *   along with the original random-string one.
  * @param authorizationDetails
  * @param forExternalAttachment
  *   the flag which indicates whether the access token is for an external attachment.
  */
case class TokenCreateResponse(
    resultCode: Option[String] = None,
    resultMessage: Option[String] = None,
    action: Option[TokenCreateResponseAction] = None,
    accessToken: Option[String] = None,
    clientId: Option[Long] = None,
    expiresAt: Option[Long] = None,
    expiresIn: Option[Long] = None,
    grantType: Option[String] = None,
    properties: Option[Seq[Property]] = None,
    refreshToken: Option[String] = None,
    scopes: Option[Seq[String]] = None,
    subject: Option[String] = None,
    tokenType: Option[String] = None,
    jwtAccessToken: Option[String] = None,
    authorizationDetails: Option[AuthzDetails] = None,
    forExternalAttachment: Option[Boolean] = None
)

object TokenCreateResponse {

  given jsonCodec: JsonValueCodec[TokenCreateResponse] = JsonCodecMaker.make(codecMakerConfig)

  given encoderTokenCreateResponse: Encoder[TokenCreateResponse] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        t.resultCode.map(v => "resultCode" -> v.asJson),
        t.resultMessage.map(v => "resultMessage" -> v.asJson),
        t.action.map(v => "action" -> v.asJson),
        t.accessToken.map(v => "accessToken" -> v.asJson),
        t.clientId.map(v => "clientId" -> v.asJson),
        t.expiresAt.map(v => "expiresAt" -> v.asJson),
        t.expiresIn.map(v => "expiresIn" -> v.asJson),
        t.grantType.map(v => "grantType" -> v.asJson),
        t.properties.map(v => "properties" -> v.asJson),
        t.refreshToken.map(v => "refreshToken" -> v.asJson),
        t.scopes.map(v => "scopes" -> v.asJson),
        t.subject.map(v => "subject" -> v.asJson),
        t.tokenType.map(v => "tokenType" -> v.asJson),
        t.jwtAccessToken.map(v => "jwtAccessToken" -> v.asJson),
        t.authorizationDetails.map(v => "authorizationDetails" -> v.asJson),
        t.forExternalAttachment.map(v => "forExternalAttachment" -> v.asJson)
      ).flatten
    }
  }

  given decoderTokenCreateResponse: Decoder[TokenCreateResponse] = Decoder.instance { c =>
    for {
      resultCode            <- c.downField("resultCode").as[Option[String]]
      resultMessage         <- c.downField("resultMessage").as[Option[String]]
      action                <- mapEmptyStringToNull(c.downField("action")).as[Option[TokenCreateResponseAction]]
      accessToken           <- c.downField("accessToken").as[Option[String]]
      clientId              <- c.downField("clientId").as[Option[Long]]
      expiresAt             <- c.downField("expiresAt").as[Option[Long]]
      expiresIn             <- c.downField("expiresIn").as[Option[Long]]
      grantType             <- c.downField("grantType").as[Option[String]]
      properties            <- c.downField("properties").as[Option[Seq[Property]]]
      refreshToken          <- c.downField("refreshToken").as[Option[String]]
      scopes                <- c.downField("scopes").as[Option[Seq[String]]]
      subject               <- c.downField("subject").as[Option[String]]
      tokenType             <- c.downField("tokenType").as[Option[String]]
      jwtAccessToken        <- c.downField("jwtAccessToken").as[Option[String]]
      authorizationDetails  <- c.downField("authorizationDetails").as[Option[AuthzDetails]]
      forExternalAttachment <- c.downField("forExternalAttachment").as[Option[Boolean]]
    } yield TokenCreateResponse(
      resultCode = resultCode,
      resultMessage = resultMessage,
      action = action,
      accessToken = accessToken,
      clientId = clientId,
      expiresAt = expiresAt,
      expiresIn = expiresIn,
      grantType = grantType,
      properties = properties,
      refreshToken = refreshToken,
      scopes = scopes,
      subject = subject,
      tokenType = tokenType,
      jwtAccessToken = jwtAccessToken,
      authorizationDetails = authorizationDetails,
      forExternalAttachment = forExternalAttachment
    )
  }

}
