/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param ticket
  *   The ticket issued from Authlete `/auth/authorization` API.
  * @param reason
  * @param description
  *   The custom description about the authorization failure.
  */
case class AuthorizationFailRequest(
    ticket: String,
    reason: AuthorizationFailRequestReason,
    description: Option[String] = None
)

object AuthorizationFailRequest {

  given jsonCodec: JsonValueCodec[AuthorizationFailRequest] = JsonCodecMaker.make(codecMakerConfig)

  given encoderAuthorizationFailRequest: Encoder[AuthorizationFailRequest] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        Some("ticket" -> t.ticket.asJson),
        Some("reason" -> t.reason.asJson),
        t.description.map(v => "description" -> v.asJson)
      ).flatten
    }
  }

  given decoderAuthorizationFailRequest: Decoder[AuthorizationFailRequest] = Decoder.instance { c =>
    for {
      ticket      <- c.downField("ticket").as[String]
      reason      <- c.downField("reason").as[AuthorizationFailRequestReason]
      description <- c.downField("description").as[Option[String]]
    } yield AuthorizationFailRequest(
      ticket = ticket,
      reason = reason,
      description = description
    )
  }

}
