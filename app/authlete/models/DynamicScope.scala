/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param name
  *   The scope name.
  * @param value
  *   The scope value.
  */
case class DynamicScope(
    name: Option[String] = None,
    value: Option[String] = None
)

object DynamicScope {

  given jsonCodec: JsonValueCodec[DynamicScope] = JsonCodecMaker.make(codecMakerConfig)

  given encoderDynamicScope: Encoder[DynamicScope] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        t.name.map(v => "name" -> v.asJson),
        t.value.map(v => "value" -> v.asJson)
      ).flatten
    }
  }

  given decoderDynamicScope: Decoder[DynamicScope] = Decoder.instance { c =>
    for {
      name  <- c.downField("name").as[Option[String]]
      value <- c.downField("value").as[Option[String]]
    } yield DynamicScope(
      name = name,
      value = value
    )
  }

}
