/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param resultCode
  *   The code which represents the result of the API call.
  * @param resultMessage
  *   A short message which explains the result of the API call.
  * @param newClientSecret
  *   The new client secret.
  * @param oldClientSecret
  *   The old client secret.
  */
case class ClientSecretRefreshResponse(
    resultCode: Option[String] = None,
    resultMessage: Option[String] = None,
    newClientSecret: Option[String] = None,
    oldClientSecret: Option[String] = None
)

object ClientSecretRefreshResponse {

  given jsonCodec: JsonValueCodec[ClientSecretRefreshResponse] =
    JsonCodecMaker.make(codecMakerConfig)

  given encoderClientSecretRefreshResponse: Encoder[ClientSecretRefreshResponse] =
    Encoder.instance { t =>
      Json.fromFields {
        Seq(
          t.resultCode.map(v => "resultCode" -> v.asJson),
          t.resultMessage.map(v => "resultMessage" -> v.asJson),
          t.newClientSecret.map(v => "newClientSecret" -> v.asJson),
          t.oldClientSecret.map(v => "oldClientSecret" -> v.asJson)
        ).flatten
      }
    }

  given decoderClientSecretRefreshResponse: Decoder[ClientSecretRefreshResponse] =
    Decoder.instance { c =>
      for {
        resultCode      <- c.downField("resultCode").as[Option[String]]
        resultMessage   <- c.downField("resultMessage").as[Option[String]]
        newClientSecret <- c.downField("newClientSecret").as[Option[String]]
        oldClientSecret <- c.downField("oldClientSecret").as[Option[String]]
      } yield ClientSecretRefreshResponse(
        resultCode = resultCode,
        resultMessage = resultMessage,
        newClientSecret = newClientSecret,
        oldClientSecret = oldClientSecret
      )
    }

}
