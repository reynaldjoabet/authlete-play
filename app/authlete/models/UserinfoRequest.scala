/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import scala.collection.immutable.Seq

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * @param token
  *   An access token.
  * @param clientCertificate
  *   Client certificate used in the TLS connection established between the client application and
  *   the userinfo endpoint. The value of this request parameter is referred to when the access
  *   token given to the userinfo endpoint was bound to a client certificate when it was issued. See
  *   [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens]
  *   (https://datatracker.ietf.org/doc/rfc8705/) for details about the specification of
  *   certificate-bound access tokens.
  * @param dpop
  *   `DPoP` header presented by the client during the request to the user info endpoint. The header
  *   contains a signed JWT which includes the public key that is paired with the private key used
  *   to sign the JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer
  *   (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.
  * @param htm
  *   HTTP method of the user info request. This field is used to validate the DPoP header. In
  *   normal cases, the value is either `GET` or `POST`.
  * @param htu
  *   URL of the user info endpoint. This field is used to validate the DPoP header. If this
  *   parameter is omitted, the `userInfoEndpoint` property of the service is used as the default
  *   value. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer
  *   (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.
  * @param uri
  *   The full URL of the userinfo endpoint.
  * @param message
  *   The HTTP message body of the request, if present.
  * @param headers
  *   HTTP headers to be included in processing the signature. If this is a signed request, this
  *   must include the Signature and Signature-Input headers, as well as any additional headers
  *   covered by the signature.
  */
case class UserinfoRequest(
    token: String,
    clientCertificate: Option[String] = None,
    dpop: Option[String] = None,
    htm: Option[String] = None,
    htu: Option[String] = None,
    uri: Option[String] = None,
    message: Option[String] = None,
    headers: Option[Seq[Pair]] = None
)

object UserinfoRequest {

  given jsonCodec: JsonValueCodec[UserinfoRequest] = JsonCodecMaker.make(codecMakerConfig)

  given encoderUserinfoRequest: Encoder[UserinfoRequest] = Encoder.instance { t =>
    Json.fromFields {
      Seq(
        Some("token" -> t.token.asJson),
        t.clientCertificate.map(v => "clientCertificate" -> v.asJson),
        t.dpop.map(v => "dpop" -> v.asJson),
        t.htm.map(v => "htm" -> v.asJson),
        t.htu.map(v => "htu" -> v.asJson),
        t.uri.map(v => "uri" -> v.asJson),
        t.message.map(v => "message" -> v.asJson),
        t.headers.map(v => "headers" -> v.asJson)
      ).flatten
    }
  }

  given decoderUserinfoRequest: Decoder[UserinfoRequest] = Decoder.instance { c =>
    for {
      token             <- c.downField("token").as[String]
      clientCertificate <- c.downField("clientCertificate").as[Option[String]]
      dpop              <- c.downField("dpop").as[Option[String]]
      htm               <- c.downField("htm").as[Option[String]]
      htu               <- c.downField("htu").as[Option[String]]
      uri               <- c.downField("uri").as[Option[String]]
      message           <- c.downField("message").as[Option[String]]
      headers           <- c.downField("headers").as[Option[Seq[Pair]]]
    } yield UserinfoRequest(
      token = token,
      clientCertificate = clientCertificate,
      dpop = dpop,
      htm = htm,
      htu = htu,
      uri = uri,
      message = message,
      headers = headers
    )
  }

}
