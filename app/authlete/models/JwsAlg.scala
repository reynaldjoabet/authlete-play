/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * The signature algorithm for JWT. This value is represented on 'alg' attribute of the header of
  * JWT. it's semantics depends upon where is this defined, for instance: - as service
  * accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign
  * it. Check your [KB
  * article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token). - as
  * client authorizationSignAlg value, it represents the signature algorithm used when [creating a
  * JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm). - or as
  * client requestSignAlg value, it specifies which is the expected signature used by [client on a
  * Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
  */
enum JwsAlg(val value: String) derives ConfiguredJsonValueCodec {

  case NONE   extends JwsAlg("NONE")
  case HS256  extends JwsAlg("HS256")
  case HS384  extends JwsAlg("HS384")
  case HS512  extends JwsAlg("HS512")
  case RS256  extends JwsAlg("RS256")
  case RS384  extends JwsAlg("RS384")
  case RS512  extends JwsAlg("RS512")
  case ES256  extends JwsAlg("ES256")
  case ES384  extends JwsAlg("ES384")
  case ES512  extends JwsAlg("ES512")
  case PS256  extends JwsAlg("PS256")
  case PS384  extends JwsAlg("PS384")
  case PS512  extends JwsAlg("PS512")
  case ES256K extends JwsAlg("ES256K")
  case EdDSA  extends JwsAlg("EdDSA")

}

object JwsAlg {

  def withValueOpt(value: String): Option[JwsAlg] = JwsAlg.values.find(_.value == value)

  def withValue(value: String): JwsAlg =
    withValueOpt(value).getOrElse(
      throw java.lang.IllegalArgumentException(s"JwsAlg enum case not found: $value")
    )

  given decoderJwsAlg: Decoder[JwsAlg] = Decoder.decodeString.map(withValue)
  given encoderJwsAlg: Encoder[JwsAlg] = Encoder.encodeString.contramap[JwsAlg](_.value)

}
