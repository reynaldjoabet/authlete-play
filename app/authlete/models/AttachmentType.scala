/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * Supported attachment types. This property corresponds to the `attachments_supported` server
  * metadata which was added by the third implementer's draft of OpenID Connect for Identity
  * Assurance 1.0.
  */
enum AttachmentType(val value: String) derives ConfiguredJsonValueCodec {

  case EMBEDDED extends AttachmentType("EMBEDDED")
  case EXTERNAL extends AttachmentType("EXTERNAL")

}

object AttachmentType {

  def withValueOpt(value: String): Option[AttachmentType] = AttachmentType
    .values
    .find(_.value == value)

  def withValue(value: String): AttachmentType =
    withValueOpt(value).getOrElse(
      throw java.lang.IllegalArgumentException(s"AttachmentType enum case not found: $value")
    )

  given decoderAttachmentType: Decoder[AttachmentType] = Decoder.decodeString.map(withValue)

  given encoderAttachmentType: Encoder[AttachmentType] = Encoder
    .encodeString
    .contramap[AttachmentType](_.value)

}
