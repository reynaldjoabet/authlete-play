/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  */
enum ClaimType(val value: String) derives ConfiguredJsonValueCodec {

  case NORMAL      extends ClaimType("NORMAL")
  case AGGREGATED  extends ClaimType("AGGREGATED")
  case DISTRIBUTED extends ClaimType("DISTRIBUTED")

}

object ClaimType {

  def withValueOpt(value: String): Option[ClaimType] = ClaimType.values.find(_.value == value)

  def withValue(value: String): ClaimType =
    withValueOpt(value).getOrElse(
      throw java.lang.IllegalArgumentException(s"ClaimType enum case not found: $value")
    )

  given decoderClaimType: Decoder[ClaimType] = Decoder.decodeString.map(withValue)
  given encoderClaimType: Encoder[ClaimType] = Encoder.encodeString.contramap[ClaimType](_.value)

}
