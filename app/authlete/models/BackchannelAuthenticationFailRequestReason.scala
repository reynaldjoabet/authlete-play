/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  * The reason of the failure of the backchannel authentication request. This request parameter is
  * not mandatory but optional. However, giving this parameter is recommended. If omitted,
  * `SERVER_ERROR` is used as a reason.
  */
enum BackchannelAuthenticationFailRequestReason(val value: String)
    derives ConfiguredJsonValueCodec {

  case ACCESSDENIED extends BackchannelAuthenticationFailRequestReason("ACCESS_DENIED")

  case EXPIREDLOGINHINTTOKEN
      extends BackchannelAuthenticationFailRequestReason("EXPIRED_LOGIN_HINT_TOKEN")

  case INVALIDBINDINGMESSAGE
      extends BackchannelAuthenticationFailRequestReason("INVALID_BINDING_MESSAGE")

  case INVALIDTARGET      extends BackchannelAuthenticationFailRequestReason("INVALID_TARGET")
  case INVALIDUSERCODE    extends BackchannelAuthenticationFailRequestReason("INVALID_USER_CODE")
  case MISSINGUSERCODE    extends BackchannelAuthenticationFailRequestReason("MISSING_USER_CODE")
  case SERVERERROR        extends BackchannelAuthenticationFailRequestReason("SERVER_ERROR")
  case UNAUTHORIZEDCLIENT extends BackchannelAuthenticationFailRequestReason("UNAUTHORIZED_CLIENT")
  case UNKNOWNUSERID      extends BackchannelAuthenticationFailRequestReason("UNKNOWN_USER_ID")

}

object BackchannelAuthenticationFailRequestReason {

  def withValueOpt(value: String): Option[BackchannelAuthenticationFailRequestReason] =
    BackchannelAuthenticationFailRequestReason.values.find(_.value == value)

  def withValue(value: String): BackchannelAuthenticationFailRequestReason =
    withValueOpt(value).getOrElse(
      throw java
        .lang
        .IllegalArgumentException(
          s"BackchannelAuthenticationFailRequestReason enum case not found: $value"
        )
    )

  given decoderBackchannelAuthenticationFailRequestReason
      : Decoder[BackchannelAuthenticationFailRequestReason] = Decoder.decodeString.map(withValue)

  given encoderBackchannelAuthenticationFailRequestReason
      : Encoder[BackchannelAuthenticationFailRequestReason] = Encoder
    .encodeString
    .contramap[BackchannelAuthenticationFailRequestReason](_.value)

}
