/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12 Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package models

import com.github.plokhotnyuk.jsoniter_scala.core.JsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.ConfiguredJsonValueCodec
import com.github.plokhotnyuk.jsoniter_scala.macros.JsonCodecMaker
import io.circe.{Decoder, Encoder, Json}
import io.circe.syntax.*

/**
  */
enum DeliveryMode(val value: String) derives ConfiguredJsonValueCodec {

  case PING extends DeliveryMode("PING")
  case POLL extends DeliveryMode("POLL")
  case PUSH extends DeliveryMode("PUSH")

}

object DeliveryMode {

  def withValueOpt(value: String): Option[DeliveryMode] = DeliveryMode.values.find(_.value == value)

  def withValue(value: String): DeliveryMode =
    withValueOpt(value).getOrElse(
      throw java.lang.IllegalArgumentException(s"DeliveryMode enum case not found: $value")
    )

  given decoderDeliveryMode: Decoder[DeliveryMode] = Decoder.decodeString.map(withValue)

  given encoderDeliveryMode: Encoder[DeliveryMode] = Encoder
    .encodeString
    .contramap[DeliveryMode](_.value)

}
