/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package apis

import cats.effect.Concurrent

import authlete.models.*
import authlete.models.JsoniterSyntaticSugar.*
import authlete.models.Result
import config.AuthleteConfig
import org.typelevel.log4cats.Logger
import sttp.client4.*
import sttp.client4._
import sttp.client4.jsoniter.*
import sttp.client4.Backend
import sttp.model.MediaType
import sttp.model.Method
import sttp.model.StatusCode
import sttp.model.Uri

trait ConfigurationEndpoints[F[*]] {

  /**
    * This API gathers configuration information about a service. <br> <details>
    * <summary>Description</summary> This API is supposed to be called from within the
    * implementation of the configuration endpoint of the service where the service that supports
    * OpenID Connect and [OpenID Connect Discovery
    * 1.0](https://openid.net/specs/openid-connect-discovery-1_0.html) must expose its configuration
    * information in a JSON format. Details about the format are described in \"[3. OpenID Provider
    * Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata)\" in
    * OpenID Connect Discovery 1.0. </details>
    *
    * Expected answers: code 200 : Any () code 400 : Result () code 401 : Result () code 403 :
    * Result () code 500 : Result ()
    *
    * Available security schemes: ServiceCredentials (http)
    *
    * @param pretty
    *   This boolean value indicates whether the JSON in the response should be formatted or not. If
    *   `true`, the JSON in the response is pretty-formatted. The default value is `false`.
    * @param patch
    *   Get the JSON Patch [RFC 6902 JavaScript Object Notation (JSON)
    *   Patch](https://www.rfc-editor.org/rfc/rfc6902) to be applied.
    */
  def serviceConfiguration(
      pretty: Option[Boolean] = None,
      patch: Option[String] = None
  ): F[Any]

}

class ConfigurationEndpointsImpl[F[*]: Concurrent](
    backend: Backend[F],
    config: AuthleteConfig,
    logger: Logger[F]
) extends ConfigurationEndpoints[F] {

  override def serviceConfiguration(pretty: Option[Boolean], patch: Option[String]): F[Any] = ???
}
