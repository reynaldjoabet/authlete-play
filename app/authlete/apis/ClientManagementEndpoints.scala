/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package apis

import cats.effect.Concurrent

import authlete.models.Client
import authlete.models.ClientAuthorizationDeleteResponse
import authlete.models.ClientAuthorizationGetListResponse
import authlete.models.ClientAuthorizationUpdateRequest
import authlete.models.ClientAuthorizationUpdateResponse
import authlete.models.ClientFlagUpdateRequest
import authlete.models.ClientFlagUpdateResponse
import authlete.models.ClientGetListResponse
import authlete.models.ClientGrantedScopesDeleteResponse
import authlete.models.ClientGrantedScopesGetResponse
import authlete.models.ClientSecretRefreshResponse
import authlete.models.ClientSecretUpdateRequest
import authlete.models.ClientSecretUpdateResponse
import authlete.models.Result
import config.AuthleteConfig
import org.typelevel.log4cats.Logger
import sttp.client4.*
import sttp.client4._
import sttp.client4.jsoniter.*
import sttp.client4.Backend
import sttp.model.MediaType
import sttp.model.Method
import sttp.model.StatusCode
import sttp.model.Uri
//import authlete.models.JsoniterSyntaticSugar.*
// import authlete.models.

trait ClientManagementEndpoints[F[*]] {

  /**
    * Delete all existing access tokens issued to a client application by an end-user. The subject
    * parameter is required and can be provided either in the path or as a query parameter.
    *
    * Expected answers: code 200 : ClientAuthorizationDeleteResponse () code 400 : Result () code
    * 401 : Result () code 403 : Result () code 500 : Result ()
    *
    * Available security schemes: ServiceCredentials (http)
    *
    * @param clientId
    *   A client ID.
    * @param subject
    *   Unique user ID of an end-user.
    * @param subject2
    *   Unique user ID of an end-user.
    */
  def clientAuthorizationDelete(
      clientId: String,
      subject: String,
      subject2: String
  ): F[ClientAuthorizationDeleteResponse]

  /**
    * Get a list of client applications that an end-user has authorized. The subject parameter is
    * required and can be provided either in the path or as a query parameter.
    *
    * Expected answers: code 200 : ClientAuthorizationGetListResponse () code 400 : Result () code
    * 401 : Result () code 403 : Result () code 500 : Result ()
    *
    * Available security schemes: ServiceCredentials (http)
    *
    * @param subject
    *   Unique user ID of an end-user.
    * @param subject2
    *   Unique user ID of an end-user.
    * @param developer
    *   Unique ID of a client developer.
    * @param start
    *   Start index of search results (inclusive). The default value is 0.
    * @param end
    *   End index of search results (exclusive). The default value is 5.
    */
  def clientAuthorizationGetList(
      subject: String,
      subject2: String,
      developer: Option[String] = None,
      start: Option[Int] = None,
      end: Option[Int] = None
  ): F[ClientAuthorizationGetListResponse]

  /**
    * Update attributes of all existing access tokens given to a client application.
    *
    * Expected answers: code 200 : ClientAuthorizationUpdateResponse () code 400 : Result () code
    * 401 : Result () code 403 : Result () code 500 : Result ()
    *
    * Available security schemes: ServiceCredentials (http)
    *
    * @param clientId
    *   A client ID.
    * @param clientAuthorizationUpdateRequest
    */
  def clientAuthorizationUpdate(
      clientId: String,
      clientAuthorizationUpdateRequest: Option[ClientAuthorizationUpdateRequest] = None
  ): F[ClientAuthorizationUpdateResponse]

  /**
    * Create a new client.
    *
    * Expected answers: code 200 : Client () code 400 : Result () code 401 : Result () code 403 :
    * Result () code 500 : Result ()
    *
    * Available security schemes: ServiceCredentials (http)
    *
    * @param client
    */
  def clientCreate(
      client: Option[Client] = None
  ): F[Client]

  /**
    * Delete a client.
    *
    * Expected answers: code 204 : (The client was successfully deleted.) code 400 : Result () code
    * 401 : Result () code 403 : Result () code 500 : Result ()
    *
    * Available security schemes: ServiceCredentials (http)
    *
    * @param clientId
    *   The client ID.
    */
  def clientDelete(
      clientId: String
  ): F[Unit]

  /**
    * Lock and unlock a client
    *
    * Expected answers: code 200 : ClientFlagUpdateResponse () code 400 : Result () code 401 :
    * Result () code 403 : Result () code 500 : Result ()
    *
    * Available security schemes: ServiceCredentials (http)
    *
    * @param clientIdentifier
    *   A client ID.
    * @param clientFlagUpdateRequest
    */
  def clientFlagUpdate(
      clientIdentifier: String,
      clientFlagUpdateRequest: Option[ClientFlagUpdateRequest] = None
  ): F[ClientFlagUpdateResponse]

  /**
    * Get a client.
    *
    * Expected answers: code 200 : Client () code 400 : Result () code 401 : Result () code 403 :
    * Result () code 500 : Result ()
    *
    * Available security schemes: ServiceCredentials (http)
    *
    * @param clientId
    *   A client ID.
    */
  def clientGet(
      clientId: String
  ): F[Client]

  /**
    * Get a list of clients.
    *
    * Expected answers: code 200 : ClientGetListResponse () code 400 : Result () code 401 : Result
    * () code 403 : Result () code 500 : Result ()
    *
    * Available security schemes: ServiceCredentials (http)
    *
    * @param developer
    *   The developer of client applications. The default value is null. If this parameter is not
    *   set to `null`, client application of the specified developer are returned. Otherwise, all
    *   client applications that belong to the service are returned.
    * @param start
    *   Start index (inclusive) of the result set. The default value is 0. Must not be a negative
    *   number.
    * @param end
    *   End index (exclusive) of the result set. The default value is 5. Must not be a negative
    *   number.
    */
  def clientGetList(
      developer: Option[String] = None,
      start: Option[Int] = None,
      end: Option[Int] = None
  ): F[ClientGetListResponse]

  /**
    * Delete the set of scopes that an end-user has granted to a client application. <br> <details>
    * <summary>Description</summary> Even if records about granted scopes are deleted by calling
    * this API, existing access tokens are not deleted and scopes of existing access tokens are not
    * changed. </details> The subject parameter is required and can be provided either in the path
    * or as a query parameter.
    *
    * Expected answers: code 200 : ClientGrantedScopesDeleteResponse () code 400 : Result () code
    * 401 : Result () code 403 : Result () code 500 : Result ()
    *
    * Available security schemes: ServiceCredentials (http)
    *
    * @param clientId
    *   A client ID.
    * @param subject
    *   Unique user ID of an end-user.
    * @param subject2
    *   Unique user ID of an end-user.
    */
  def clientGrantedScopesDelete(
      clientId: String,
      subject: String,
      subject2: String
  ): F[ClientGrantedScopesDeleteResponse]

  /**
    * Get the set of scopes that a user has granted to a client application. <br> <details>
    * <summary>Description</summary> Possible values for `requestableScopes` parameter in the
    * response from this API are as follows. **null** The user has not granted authorization to the
    * client application in the past, or records about the combination of the user and the client
    * application have been deleted from Authlete's DB. **An empty set** The user has granted
    * authorization to the client application in the past, but no scopes are associated with the
    * authorization. **A set with at least one element** The user has granted authorization to the
    * client application in the past and some scopes are associated with the authorization. These
    * scopes are returned. Example: `[ \"profile\", \"email\" ]` The subject parameter is required
    * and can be provided either in the path or as a query parameter. </details>
    *
    * Expected answers: code 200 : ClientGrantedScopesGetResponse () code 400 : Result () code 401 :
    * Result () code 403 : Result () code 500 : Result ()
    *
    * Available security schemes: ServiceCredentials (http)
    *
    * @param clientId
    *   A client ID.
    * @param subject
    *   Unique user ID of an end-user.
    * @param subject2
    *   Unique user ID of an end-user.
    */
  def clientGrantedScopesGet(
      clientId: String,
      subject: String,
      subject2: String
  ): F[ClientGrantedScopesGetResponse]

  /**
    * Refresh the client secret of a client. A new value of the client secret will be generated by
    * the Authlete server. If you want to specify a new value, use `/api/client/secret/update` API.
    *
    * Expected answers: code 200 : ClientSecretRefreshResponse () code 400 : Result () code 401 :
    * Result () code 403 : Result () code 500 : Result ()
    *
    * Available security schemes: ServiceCredentials (http)
    *
    * @param clientIdentifier
    *   The client ID or the client ID alias of a client.
    */
  def clientSecretRefresh(
      clientIdentifier: String
  ): F[ClientSecretRefreshResponse]

  /**
    * Update the client secret of a client. If you want to have the Authlete server generate a new
    * value of the client secret, use `/api/client/secret/refresh` API.
    *
    * Expected answers: code 200 : ClientSecretUpdateResponse () code 400 : Result () code 401 :
    * Result () code 403 : Result () code 500 : Result ()
    *
    * Available security schemes: ServiceCredentials (http)
    *
    * @param clientIdentifier
    *   The client ID or the client ID alias of a client.
    * @param clientSecretUpdateRequest
    */
  def clientSecretUpdate(
      clientIdentifier: String,
      clientSecretUpdateRequest: ClientSecretUpdateRequest
  ): F[ClientSecretUpdateResponse]

  /**
    * Update a client.
    *
    * Expected answers: code 200 : Client () code 400 : Result () code 401 : Result () code 403 :
    * Result () code 500 : Result ()
    *
    * Available security schemes: ServiceCredentials (http)
    *
    * @param clientId
    *   A client ID.
    * @param client
    */
  def clientUpdate(
      clientId: String,
      client: Option[Client] = None
  ): F[Client]

}

class ClientManagementEndpointsImpl[F[*]: Concurrent](
    backend: Backend[F],
    config: AuthleteConfig,
    logger: Logger[F]
) extends ClientManagementEndpoints[F] {

  override def clientAuthorizationDelete(
      clientId: String,
      subject: String,
      subject2: String
  ): F[ClientAuthorizationDeleteResponse] = ???

  override def clientAuthorizationGetList(
      subject: String,
      subject2: String,
      developer: Option[String],
      start: Option[Int],
      end: Option[Int]
  ): F[ClientAuthorizationGetListResponse] = ???

  override def clientAuthorizationUpdate(
      clientId: String,
      clientAuthorizationUpdateRequest: Option[ClientAuthorizationUpdateRequest]
  ): F[ClientAuthorizationUpdateResponse] = ???

  override def clientCreate(client: Option[Client]): F[Client] = ???

  override def clientDelete(clientId: String): F[Unit] = ???

  override def clientFlagUpdate(
      clientIdentifier: String,
      clientFlagUpdateRequest: Option[ClientFlagUpdateRequest]
  ): F[ClientFlagUpdateResponse] = ???

  override def clientGet(clientId: String): F[Client] = ???

  override def clientGetList(
      developer: Option[String],
      start: Option[Int],
      end: Option[Int]
  ): F[ClientGetListResponse] = ???

  override def clientGrantedScopesDelete(
      clientId: String,
      subject: String,
      subject2: String
  ): F[ClientGrantedScopesDeleteResponse] = ???

  override def clientGrantedScopesGet(
      clientId: String,
      subject: String,
      subject2: String
  ): F[ClientGrantedScopesGetResponse] = ???

  override def clientSecretRefresh(clientIdentifier: String): F[ClientSecretRefreshResponse] = ???

  override def clientSecretUpdate(
      clientIdentifier: String,
      clientSecretUpdateRequest: ClientSecretUpdateRequest
  ): F[ClientSecretUpdateResponse] = ???

  override def clientUpdate(clientId: String, client: Option[Client]): F[Client] = ???

}
