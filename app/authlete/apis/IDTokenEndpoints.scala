/**
  * Authlete API Authlete API Document.
  *
  * The version of the OpenAPI document: 2.3.12
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package authlete
package apis

import cats.effect.Concurrent

import authlete.models.IdtokenReissueRequest
import authlete.models.IdtokenReissueResponse
import authlete.models.Result
import config.AuthleteConfig
import org.typelevel.log4cats.Logger
import sttp.client4.*
import sttp.client4._
import sttp.client4.jsoniter.*
import sttp.client4.Backend
import sttp.model.MediaType
import sttp.model.Method
import sttp.model.StatusCode
import sttp.model.Uri
//import authlete.models.JsoniterSyntaticSugar.*
// import authlete.models.

trait IDTokenEndpoints[F[*]] {

  /**
    * The API is expected to be called only when the value of the `action` parameter in a response
    * from the `/auth/token` API is
    * {@link TokenResponse.Action#ID_TOKEN_REISSUABLE ID_TOKEN_REISSUABLE}. The purpose of the
    * `/idtoken/reissue` API is to generate a token response that includes a new ID token together
    * with a new access token and a refresh token.
    *
    * Expected answers: code 200 : IdtokenReissueResponse code 400 : Result () code 401 : Result ()
    * code 403 : Result () code 500 : Result ()
    *
    * Available security schemes: ServiceCredentials (http)
    *
    * @param idtokenReissueRequest
    */
  def idtokenReissue(
      idtokenReissueRequest: Option[IdtokenReissueRequest] = None
  ): F[IdtokenReissueResponse]

}

class IDTokenEndpointsImpl[F[*]: Concurrent](
    backend: Backend[F],
    config: AuthleteConfig,
    logger: Logger[F]
) extends IDTokenEndpoints[F] {

  override def idtokenReissue(
      idtokenReissueRequest: Option[IdtokenReissueRequest]
  ): F[IdtokenReissueResponse] = ???

}
